From 3ad08bb0b2550520d76bbe57e612c003b0872f2d Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Fri, 14 Apr 2017 17:09:41 -0700
Subject: [PATCH] Rework of Generics system for better output


diff --git a/src/org/jetbrains/java/decompiler/main/ClassWriter.java b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
index 815ec14..3fba799 100644
--- a/src/org/jetbrains/java/decompiler/main/ClassWriter.java
+++ b/src/org/jetbrains/java/decompiler/main/ClassWriter.java
@@ -334,7 +334,7 @@ public class ClassWriter {
 
     buffer.append(node.simpleName);
 
-    GenericClassDescriptor descriptor = getGenericClassDescriptor(cl);
+    GenericClassDescriptor descriptor = cl.getSignature();
     if (descriptor != null && !descriptor.fparameters.isEmpty()) {
       appendTypeParameters(buffer, descriptor.fparameters, descriptor.fbounds);
     }
@@ -345,12 +345,7 @@ public class ClassWriter {
       VarType supertype = new VarType(cl.superClass.getString(), true);
       if (!VarType.VARTYPE_OBJECT.equals(supertype)) {
         buffer.append("extends ");
-        if (descriptor != null) {
-          buffer.append(GenericMain.getGenericCastTypeName(descriptor.superclass));
-        }
-        else {
-          buffer.append(ExprProcessor.getCastTypeName(supertype));
-        }
+        buffer.append(ExprProcessor.getCastTypeName(descriptor == null ? supertype : descriptor.superclass));
         buffer.append(' ');
       }
     }
@@ -363,12 +358,7 @@ public class ClassWriter {
           if (i > 0) {
             buffer.append(", ");
           }
-          if (descriptor != null) {
-            buffer.append(GenericMain.getGenericCastTypeName(descriptor.superinterfaces.get(i)));
-          }
-          else {
-            buffer.append(ExprProcessor.getCastTypeName(new VarType(cl.getInterface(i), true)));
-          }
+          buffer.append(ExprProcessor.getCastTypeName(descriptor == null ? new VarType(cl.getInterface(i), true) : descriptor.superinterfaces.get(i)));
         }
         buffer.append(' ');
       }
@@ -406,21 +396,10 @@ public class ClassWriter {
 
     VarType fieldType = new VarType(fd.getDescriptor(), false);
 
-    GenericFieldDescriptor descriptor = null;
-    if (DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES)) {
-      StructGenericSignatureAttribute attr = (StructGenericSignatureAttribute)fd.getAttributes().getWithKey("Signature");
-      if (attr != null) {
-        descriptor = GenericMain.parseFieldSignature(attr.getSignature());
-      }
-    }
+    GenericFieldDescriptor descriptor = fd.getSignature();
 
     if (!isEnum) {
-      if (descriptor != null) {
-        buffer.append(GenericMain.getGenericCastTypeName(descriptor.type));
-      }
-      else {
-        buffer.append(ExprProcessor.getCastTypeName(fieldType));
-      }
+      buffer.append(ExprProcessor.getCastTypeName(descriptor == null ? fieldType : descriptor.type));
       buffer.append(' ');
     }
 
@@ -444,6 +423,7 @@ public class ClassWriter {
       else {
         buffer.append(" = ");
         // FIXME: special case field initializer. Can map to more than one method (constructor) and bytecode intruction.
+        VarType rightType = initializer.getInferredExprType(descriptor == null ? fieldType : descriptor.type);
         buffer.append(initializer.toJava(indent, tracer));
       }
     }
@@ -592,6 +572,7 @@ public class ClassWriter {
       boolean clinit = false, init = false, dinit = false;
 
       MethodDescriptor md = MethodDescriptor.parseDescriptor(mt.getDescriptor());
+      DecompilerContext.setProperty(DecompilerContext.CURRENT_METHOD_DESCRIPTOR, md);
 
       int flags = mt.getAccessFlags();
       if ((flags & CodeConstants.ACC_NATIVE) != 0) {
@@ -646,25 +627,20 @@ public class ClassWriter {
         clinit = true;
       }
 
-      GenericMethodDescriptor descriptor = null;
-      if (DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES)) {
-        StructGenericSignatureAttribute attr = (StructGenericSignatureAttribute)mt.getAttributes().getWithKey("Signature");
-        if (attr != null) {
-          descriptor = GenericMain.parseMethodSignature(attr.getSignature());
-          if (descriptor != null) {
-            long actualParams = md.params.length;
-            List<VarVersionPair> sigFields = methodWrapper.signatureFields;
-            if (sigFields != null) {
-              actualParams = sigFields.stream().filter(Objects::isNull).count();
-            }
-            else if (isEnum && init) actualParams -= 2;
-            if (actualParams != descriptor.params.size()) {
-              String message = "Inconsistent generic signature in method " + mt.getName() + " " + mt.getDescriptor() + " in " + cl.qualifiedName;
-              DecompilerContext.getLogger().writeMessage(message, IFernflowerLogger.Severity.WARN);
-              descriptor = null;
-            }
-          }
+      GenericMethodDescriptor descriptor = mt.getSignature();
+      if (descriptor != null) {
+        long actualParams = md.params.length;
+        List<VarVersionPair> sigFields = methodWrapper.signatureFields;
+        if (sigFields != null) {
+          actualParams = sigFields.stream().filter(Objects::isNull).count();
+        }
+        else if (isEnum && init) actualParams -= 2;
+        if (actualParams != descriptor.params.size()) {
+          String message = "Inconsistent generic signature in method " + mt.getName() + " " + mt.getDescriptor() + " in " + cl.qualifiedName;
+          DecompilerContext.getLogger().writeMessage(message, IFernflowerLogger.Severity.WARN);
+          descriptor = null;
         }
+        md.addGenericDescriptor(descriptor);
       }
 
       boolean throwsExceptions = false;
@@ -679,12 +655,7 @@ public class ClassWriter {
         }
 
         if (!init) {
-          if (descriptor != null) {
-            buffer.append(GenericMain.getGenericCastTypeName(descriptor.ret));
-          }
-          else {
-            buffer.append(ExprProcessor.getCastTypeName(md.ret));
-          }
+          buffer.append(ExprProcessor.getCastTypeName(descriptor == null ? md.ret : descriptor.ret));
           buffer.append(' ');
         }
 
@@ -705,6 +676,12 @@ public class ClassWriter {
         int index = isEnum && init ? 3 : thisVar ? 1 : 0;
         boolean hasDescriptor = descriptor != null;
         int start = isEnum && init && !hasDescriptor ? 2 : 0;
+
+        if (init && hasDescriptor && !isEnum &&
+            ((node.access & CodeConstants.ACC_STATIC) == 0) && node.type == ClassNode.CLASS_MEMBER) {
+          index++; //Enclosing class
+        }
+
         int params = hasDescriptor ? descriptor.params.size() : md.params.length;
         for (int i = start; i < params; i++) {
           if (hasDescriptor || (signFields == null || signFields.get(i) == null)) {
@@ -718,45 +695,23 @@ public class ClassWriter {
               buffer.append("final ");
             }
 
-            if (descriptor != null) {
-              GenericType parameterType = descriptor.params.get(i);
+            VarType parameterType = descriptor == null ? md.params[i] : descriptor.params.get(i);
 
-              boolean isVarArg = (i == lastVisibleParameterIndex && mt.hasModifier(CodeConstants.ACC_VARARGS) && parameterType.arrayDim > 0);
-              if (isVarArg) {
-                parameterType = parameterType.decreaseArrayDim();
-              }
-
-              String typeName = GenericMain.getGenericCastTypeName(parameterType);
-              if (ExprProcessor.UNDEFINED_TYPE_STRING.equals(typeName) &&
-                  DecompilerContext.getOption(IFernflowerPreferences.UNDEFINED_PARAM_TYPE_OBJECT)) {
-                typeName = ExprProcessor.getCastTypeName(VarType.VARTYPE_OBJECT);
-              }
-
-              buffer.append(typeName);
-
-              if (isVarArg) {
-                buffer.append("...");
-              }
+            boolean isVarArg = (i == lastVisibleParameterIndex && mt.hasModifier(CodeConstants.ACC_VARARGS) && parameterType.arrayDim > 0);
+            if (isVarArg) {
+              parameterType = parameterType.decreaseArrayDim();
             }
-            else {
-              VarType parameterType = md.params[i];
 
-              boolean isVarArg = (i == lastVisibleParameterIndex && mt.hasModifier(CodeConstants.ACC_VARARGS) && parameterType.arrayDim > 0);
-              if (isVarArg) {
-                parameterType = parameterType.decreaseArrayDim();
-              }
-
-              String typeName = ExprProcessor.getCastTypeName(parameterType);
-              if (ExprProcessor.UNDEFINED_TYPE_STRING.equals(typeName) &&
-                  DecompilerContext.getOption(IFernflowerPreferences.UNDEFINED_PARAM_TYPE_OBJECT)) {
-                typeName = ExprProcessor.getCastTypeName(VarType.VARTYPE_OBJECT);
-              }
+            String typeName = ExprProcessor.getCastTypeName(parameterType);
+            if (ExprProcessor.UNDEFINED_TYPE_STRING.equals(typeName) &&
+                DecompilerContext.getOption(IFernflowerPreferences.UNDEFINED_PARAM_TYPE_OBJECT)) {
+              typeName = ExprProcessor.getCastTypeName(VarType.VARTYPE_OBJECT);
+            }
 
-              buffer.append(typeName);
+            buffer.append(typeName);
 
-              if (isVarArg) {
-                buffer.append("...");
-              }
+            if (isVarArg) {
+              buffer.append("...");
             }
 
             buffer.append(' ');
@@ -767,7 +722,7 @@ public class ClassWriter {
             paramCount++;
           }
 
-          index += md.params[i].stackSize;
+          index += hasDescriptor ? descriptor.params.get(i).stackSize : md.params[i].stackSize;
         }
 
         buffer.append(')');
@@ -781,14 +736,11 @@ public class ClassWriter {
             if (i > 0) {
               buffer.append(", ");
             }
+            VarType type = new VarType(attr.getExcClassname(i, cl.getPool()), true);
             if (descriptor != null && !descriptor.exceptions.isEmpty()) {
-              GenericType type = descriptor.exceptions.get(i);
-              buffer.append(GenericMain.getGenericCastTypeName(type));
-            }
-            else {
-              VarType type = new VarType(attr.getExcClassname(i, cl.getPool()), true);
-              buffer.append(ExprProcessor.getCastTypeName(type));
+              type = descriptor.exceptions.get(i);
             }
+            buffer.append(ExprProcessor.getCastTypeName(type));
           }
         }
       }
@@ -1040,17 +992,7 @@ public class ClassWriter {
     }
   }
 
-  public static GenericClassDescriptor getGenericClassDescriptor(StructClass cl) {
-    if (DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES)) {
-      StructGenericSignatureAttribute attr = (StructGenericSignatureAttribute)cl.getAttributes().getWithKey("Signature");
-      if (attr != null) {
-        return GenericMain.parseClassSignature(attr.getSignature());
-      }
-    }
-    return null;
-  }
-
-  public static void appendTypeParameters(TextBuffer buffer, List<String> parameters, List<List<GenericType>> bounds) {
+  public static void appendTypeParameters(TextBuffer buffer, List<String> parameters, List<List<VarType>> bounds) {
     buffer.append('<');
 
     for (int i = 0; i < parameters.size(); i++) {
@@ -1060,13 +1002,13 @@ public class ClassWriter {
 
       buffer.append(parameters.get(i));
 
-      List<GenericType> parameterBounds = bounds.get(i);
+      List<VarType> parameterBounds = bounds.get(i);
       if (parameterBounds.size() > 1 || !"java/lang/Object".equals(parameterBounds.get(0).value)) {
         buffer.append(" extends ");
-        buffer.append(GenericMain.getGenericCastTypeName(parameterBounds.get(0)));
+        buffer.append(ExprProcessor.getCastTypeName(parameterBounds.get(0)));
         for (int j = 1; j < parameterBounds.size(); j++) {
           buffer.append(" & ");
-          buffer.append(GenericMain.getGenericCastTypeName(parameterBounds.get(j)));
+          buffer.append(ExprProcessor.getCastTypeName(parameterBounds.get(j)));
         }
       }
     }
diff --git a/src/org/jetbrains/java/decompiler/main/DecompilerContext.java b/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
index 39619ce..f0dff09 100644
--- a/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
+++ b/src/org/jetbrains/java/decompiler/main/DecompilerContext.java
@@ -33,6 +33,7 @@ public class DecompilerContext {
   public static final String CURRENT_CLASS_WRAPPER = "CURRENT_CLASS_WRAPPER";
   public static final String CURRENT_CLASS_NODE = "CURRENT_CLASS_NODE";
   public static final String CURRENT_METHOD_WRAPPER = "CURRENT_METHOD_WRAPPER";
+  public static final String CURRENT_METHOD_DESCRIPTOR = "CURRENT_METHOD_DESCRIPTOR";
   public static final String CURRENT_VAR_PROCESSOR = "CURRENT_VAR_PROCESSOR";
 
   private static final ThreadLocal<DecompilerContext> currentContext = new ThreadLocal<>();
diff --git a/src/org/jetbrains/java/decompiler/main/Fernflower.java b/src/org/jetbrains/java/decompiler/main/Fernflower.java
index e355ee9..aec95c1 100644
--- a/src/org/jetbrains/java/decompiler/main/Fernflower.java
+++ b/src/org/jetbrains/java/decompiler/main/Fernflower.java
@@ -19,6 +19,7 @@ import org.jetbrains.java.decompiler.main.ClassesProcessor.ClassNode;
 import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
 import org.jetbrains.java.decompiler.main.extern.IBytecodeProvider;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerLogger;
+import org.jetbrains.java.decompiler.main.extern.IFernflowerLogger.Severity;
 import org.jetbrains.java.decompiler.main.extern.IResultSaver;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.modules.renamer.IdentifierConverter;
@@ -27,7 +28,10 @@ import org.jetbrains.java.decompiler.struct.StructClass;
 import org.jetbrains.java.decompiler.struct.StructContext;
 import org.jetbrains.java.decompiler.struct.lazy.LazyLoader;
 
+import java.io.File;
+import java.util.HashSet;
 import java.util.Map;
+import java.util.Set;
 
 public class Fernflower implements IDecompiledData {
 
@@ -39,6 +43,10 @@ public class Fernflower implements IDecompiledData {
     DecompilerContext.initContext(options);
     DecompilerContext.setCounterContainer(new CounterContainer());
     DecompilerContext.setLogger(logger);
+
+    if (DecompilerContext.getOption(IFernflowerPreferences.INCLUDE_ENTIRE_CLASSPATH)) {
+      addAllClasspath();
+    }
   }
 
   public void decompileContext() {
@@ -92,4 +100,27 @@ public class Fernflower implements IDecompiledData {
       return null;
     }
   }
+
+  //TODO: Look into caching the metadata grabbed from the context info?
+  //Also test on J9 JRE to see if gathering of the classpath is the same.
+  private void addAllClasspath() {
+    Set<String> found = new HashSet<String>();
+    String[] props = { System.getProperty("java.class.path"), System.getProperty("sun.boot.class.path") };
+    for (String prop : props) {
+      if (prop == null)
+        continue;
+
+      for (final String path : prop.split(File.pathSeparator)) {
+        File file = new File(path);
+        if (found.contains(file.getAbsolutePath()))
+          continue;
+
+        if (file.exists() && (file.getName().endsWith(".class") || file.getName().endsWith(".jar"))) {
+          DecompilerContext.getLogger().writeMessage("Adding File to context from classpath: " + file, Severity.INFO);
+          structContext.addSpace(file, false);
+          found.add(file.getAbsolutePath());
+        }
+      }
+    }
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
index c1ceecd..53a68e1 100644
--- a/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
+++ b/src/org/jetbrains/java/decompiler/main/extern/IFernflowerPreferences.java
@@ -45,6 +45,8 @@ public interface IFernflowerPreferences {
   String LAMBDA_TO_ANONYMOUS_CLASS = "lac";
   String BYTECODE_SOURCE_MAPPING = "bsm";
 
+  String INCLUDE_ENTIRE_CLASSPATH = "iec";
+
   String LOG_LEVEL = "log";
   String MAX_PROCESSING_METHOD = "mpm";
   String RENAME_ENTITIES = "ren";
@@ -87,6 +89,8 @@ public interface IFernflowerPreferences {
     defaults.put(LAMBDA_TO_ANONYMOUS_CLASS, "0");
     defaults.put(BYTECODE_SOURCE_MAPPING, "0");
 
+    defaults.put(INCLUDE_ENTIRE_CLASSPATH, "0");
+
     defaults.put(LOG_LEVEL, IFernflowerLogger.Severity.INFO.name());
     defaults.put(MAX_PROCESSING_METHOD, "0");
     defaults.put(RENAME_ENTITIES, "0");
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
index 290c730..e1e29cc 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/ExprProcessor.java
@@ -38,6 +38,8 @@ import org.jetbrains.java.decompiler.struct.consts.PooledConstant;
 import org.jetbrains.java.decompiler.struct.consts.PrimitiveConstant;
 import org.jetbrains.java.decompiler.struct.gen.MethodDescriptor;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMain;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericType;
 
 import java.util.*;
 
@@ -696,7 +698,13 @@ public class ExprProcessor implements CodeConstants {
     else if (tp == CodeConstants.TYPE_VOID) {
       return "void";
     }
+    else if (tp == CodeConstants.TYPE_GENVAR && type.isGeneric()) {
+      return type.value;
+    }
     else if (tp == CodeConstants.TYPE_OBJECT) {
+      if (type.isGeneric()) {
+        return ((GenericType)type).getCastName();
+      }
       String ret = buildJavaClassName(type.value);
       if (getShort) {
         ret = DecompilerContext.getImportCollector().getShortName(ret);
@@ -813,6 +821,7 @@ public class ExprProcessor implements CodeConstants {
     lst = Exprent.sortIndexed(lst);
 
     for (Exprent expr : lst) {
+      expr.getInferredExprType(null);
       TextBuffer content = expr.toJava(indent, tracer);
       if (content.length() > 0) {
         if (expr.type != Exprent.EXPRENT_VAR || !((VarExprent)expr).isClassDef()) {
@@ -869,7 +878,7 @@ public class ExprProcessor implements CodeConstants {
                                          boolean castNull,
                                          boolean castAlways,
                                          BytecodeMappingTracer tracer) {
-    VarType rightType = exprent.getExprType();
+    VarType rightType = exprent.getInferredExprType(leftType);
 
     boolean cast =
       castAlways ||
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
index 58017ef..66ddb10 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
@@ -66,6 +66,11 @@ public class AssignmentExprent extends Exprent {
   }
 
   @Override
+  public VarType getInferredExprType(VarType upperBounds) {
+    return getExprType();
+  }
+
+  @Override
   public CheckTypesResult checkExprTypeBounds() {
     CheckTypesResult result = new CheckTypesResult();
 
@@ -106,7 +111,7 @@ public class AssignmentExprent extends Exprent {
   @Override
   public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
     VarType leftType = left.getExprType();
-    VarType rightType = right.getExprType();
+    VarType rightType = right.getInferredExprType(left.getInferredExprType(null));
 
     boolean fieldInClassInit = false, hiddenField = false;
     if (left.type == Exprent.EXPRENT_FIELD) { // first assignment to a final field. Field name without "this" in front of it
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
index 0c3a1f9..722e306 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
@@ -24,6 +24,7 @@ import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.CheckTypesResult;
 import org.jetbrains.java.decompiler.struct.attr.StructExceptionsAttribute;
+import org.jetbrains.java.decompiler.struct.gen.MethodDescriptor;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
@@ -80,13 +81,18 @@ public class ExitExprent extends Exprent {
   @Override
   public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
     tracer.addMapping(bytecode);
+    MethodDescriptor md = (MethodDescriptor)DecompilerContext.getProperty(DecompilerContext.CURRENT_METHOD_DESCRIPTOR);
 
     if (exitType == EXIT_RETURN) {
       TextBuffer buffer = new TextBuffer("return");
 
       if (retType.type != CodeConstants.TYPE_VOID) {
+        VarType ret = retType;
+        if (md.genericInfo != null && md.genericInfo.ret != null) {
+          ret = md.genericInfo.ret;
+        }
         buffer.append(' ');
-        ExprProcessor.getCastedExprent(value, retType, buffer, indent, false, tracer);
+        ExprProcessor.getCastedExprent(value, ret, buffer, indent, false, false, tracer);
       }
 
       return buffer;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
index 63ff8b2..13c6bb2 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
@@ -19,9 +19,14 @@ import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.main.collectors.CounterContainer;
+import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
+import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.CheckTypesResult;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericClassDescriptor;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMethodDescriptor;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericType;
 import org.jetbrains.java.decompiler.struct.match.IMatchable;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
@@ -67,6 +72,11 @@ public abstract class Exprent implements IMatchable {
     return VarType.VARTYPE_VOID;
   }
 
+  // TODO: This captures the state of upperBound, find a way to do it without modifying state?
+  public VarType getInferredExprType(VarType upperBound) {
+    return getExprType();
+  }
+
   public int getExprentUse() {
     return 0;
   }
@@ -184,7 +194,73 @@ public abstract class Exprent implements IMatchable {
       }
       return ret;
     }
-  
+
+  protected VarType gatherGenerics(VarType upperBound, VarType ret, List<String> fparams, List<VarType> genericArgs) {
+    Map<VarType, VarType> map = new HashMap<>();
+
+    // List<T> -> List<String>
+    if (upperBound != null && upperBound.isGeneric() && ret.isGeneric()) {
+      List<VarType> leftArgs = ((GenericType)upperBound).getArguments();
+      List<VarType> rightArgs = ((GenericType)ret).getArguments();
+      if (leftArgs.size() == rightArgs.size() && rightArgs.size() == fparams.size()) {
+        for (int i = 0; i < leftArgs.size(); i++) {
+          VarType left = leftArgs.get(i);
+          VarType right = rightArgs.get(i);
+          if (left != null && right.value.equals(fparams.get(i))) {
+            genericArgs.add(left);
+            map.put(right, left);
+          } else {
+            genericArgs.clear();
+            map.clear();
+            break;
+          }
+        }
+      }
+    }
+
+    return map.isEmpty() ? ret : ret.remap(map);
+  }
+
+  protected void appendParameters(TextBuffer buf, List<VarType> genericArgs) {
+    if (genericArgs.isEmpty()) {
+      return;
+    }
+    buf.append("<");
+    //TODO: Check target output level and use <> operator?
+    for (int i = 0; i < genericArgs.size(); i++) {
+      buf.append(ExprProcessor.getCastTypeName(genericArgs.get(i)));
+      if(i + 1 < genericArgs.size()) {
+        buf.append(", ");
+      }
+    }
+    buf.append(">");
+  }
+
+  protected Map<VarType, List<VarType>> getNamedGenerics() {
+    Map<VarType, List<VarType>> ret = new HashMap<>();
+    MethodWrapper method = (MethodWrapper)DecompilerContext.getProperty(DecompilerContext.CURRENT_METHOD_WRAPPER);
+
+    if (method == null) {
+      return ret;
+    }
+
+    GenericClassDescriptor cls = method.methodStruct.getClassStruct().getSignature();
+    if (cls != null) {
+      for (int x = 0; x < cls.fparameters.size(); x++) {
+        ret.put(GenericType.parse("T" + cls.fparameters.get(x) + ";"), cls.fbounds.get(x));
+      }
+    }
+
+    GenericMethodDescriptor mtd = method.methodStruct.getSignature();
+    if (mtd != null) {
+      for (int x = 0; x < mtd.fparameters.size(); x++) {
+        ret.put(GenericType.parse("T" + mtd.fparameters.get(x) + ";"), mtd.fbounds.get(x));
+      }
+    }
+
+    return ret;
+  }
+
   // *****************************************************************************
   // IMatchable implementation
   // *****************************************************************************
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
index 959fdf6..f0f5b6f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
@@ -23,6 +23,8 @@ import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.main.rels.MethodWrapper;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
+import org.jetbrains.java.decompiler.struct.StructClass;
+import org.jetbrains.java.decompiler.struct.StructField;
 import org.jetbrains.java.decompiler.struct.attr.StructLocalVariableTableAttribute;
 import org.jetbrains.java.decompiler.struct.consts.LinkConstant;
 import org.jetbrains.java.decompiler.struct.gen.FieldDescriptor;
@@ -65,6 +67,24 @@ public class FieldExprent extends Exprent {
   }
 
   @Override
+  public VarType getInferredExprType(VarType upperBound) {
+    StructClass cl = DecompilerContext.getStructContext().getClass(classname);
+    while(cl != null) {
+      StructField ft = cl.getField(name, descriptor.descriptorString);
+      if(ft != null && ft.getSignature() != null) {
+        return ft.getSignature().type;
+      }
+      if (cl.superClass == null) {
+        cl = null;
+      }
+      else {
+        cl = DecompilerContext.getStructContext().getClass((String)cl.superClass.value);
+      }
+    }
+    return getExprType();
+  }
+
+  @Override
   public int getExprentUse() {
     return instance == null ? Exprent.MULTIPLE_USES : instance.getExprentUse() & Exprent.MULTIPLE_USES;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
index cbc78b5..38fe98f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
@@ -16,6 +16,8 @@
 package org.jetbrains.java.decompiler.modules.decompiler.exps;
 
 import org.jetbrains.java.decompiler.code.CodeConstants;
+import org.jetbrains.java.decompiler.code.interpreter.Util;
+import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
 import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
@@ -197,6 +199,7 @@ public class FunctionExprent extends Exprent {
   private int funcType;
   private VarType implicitType;
   private final List<Exprent> lstOperands;
+  private boolean needsCast = true;
 
   public FunctionExprent(int funcType, ListStack<Exprent> stack, BitSet bytecodeOffsets) {
     this(funcType, new ArrayList<>(), bytecodeOffsets);
@@ -308,6 +311,34 @@ public class FunctionExprent extends Exprent {
   }
 
   @Override
+  public VarType getInferredExprType(VarType upperBound) {
+    if (funcType == FUNCTION_CAST) {
+      this.needsCast = true;
+      VarType right = lstOperands.get(0).getInferredExprType(upperBound);
+
+      if (upperBound != null && upperBound.isGeneric()) {
+        Map<VarType, List<VarType>> names = this.getNamedGenerics();
+
+        List<VarType> types = names.get(right);
+        if (types != null) {
+          boolean anyMatch = false; //TODO: allMatch instead of anyMatch?
+          for (VarType type : types) {
+            anyMatch |= Util.instanceOf(DecompilerContext.getStructContext(), type.value, lstOperands.get(1).getExprType().value);
+          }
+          if (anyMatch) {
+            this.needsCast = false;
+          }
+        }
+      }
+      else { //TODO: Capture generics to make cast better?
+        this.needsCast = right.type == CodeConstants.TYPE_NULL || !Util.instanceOf(DecompilerContext.getStructContext(), right.value, lstOperands.get(1).getExprType().value);
+      }
+    }
+    return getExprType();
+  }
+
+
+  @Override
   public int getExprentUse() {
     if (funcType >= FUNCTION_IMM && funcType <= FUNCTION_PPI) {
       return 0;
@@ -473,6 +504,9 @@ public class FunctionExprent extends Exprent {
       case FUNCTION_NEG:
         return wrapOperandString(lstOperands.get(0), true, indent, tracer).prepend("-");
       case FUNCTION_CAST:
+        if (!needsCast) {
+          return lstOperands.get(0).toJava(indent, tracer);
+        }
         return lstOperands.get(1).toJava(indent, tracer).enclose("(", ")").append(wrapOperandString(lstOperands.get(0), true, indent, tracer));
       case FUNCTION_ARRAY_LENGTH:
         Exprent arr = lstOperands.get(0);
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index a38c2ee..6460138 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -32,6 +32,7 @@ import org.jetbrains.java.decompiler.struct.consts.LinkConstant;
 import org.jetbrains.java.decompiler.struct.consts.PooledConstant;
 import org.jetbrains.java.decompiler.struct.gen.MethodDescriptor;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericType;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
 import org.jetbrains.java.decompiler.struct.match.MatchNode.RuleValue;
@@ -67,6 +68,7 @@ public class InvocationExprent extends Exprent {
   private int invocationTyp = INVOKE_VIRTUAL;
   private List<Exprent> lstParameters = new ArrayList<>();
   private List<PooledConstant> bootstrapArguments;
+  private List<VarType> genericArgs = new ArrayList<>();
 
   public InvocationExprent() {
     super(EXPRENT_INVOCATION);
@@ -174,6 +176,55 @@ public class InvocationExprent extends Exprent {
     return descriptor.ret;
   }
 
+
+  @Override
+  public VarType getInferredExprType(VarType upperBound) {
+    List<StructMethod> matches = getMatchedDescriptors();
+    StructMethod desc = null;
+    if(matches.size() == 1) {
+      desc = matches.get(0);
+    }
+
+    genericArgs.clear();
+
+    if (desc != null && desc.getSignature() != null) {
+      VarType ret = desc.getSignature().ret;
+
+      if (instance != null) {
+        VarType instType = instance.getInferredExprType(upperBound);
+
+        if (instType.isGeneric()) {
+          StructClass cls = DecompilerContext.getStructContext().getClass(instType.value);
+
+          if (cls != null && cls.getSignature() != null) {
+            Map<VarType, VarType> map = new HashMap<>();
+            GenericType ginstance = (GenericType)instType;
+
+            if (cls.getSignature().fparameters.size() == ginstance.getArguments().size()) {
+              for (int x = 0; x < ginstance.getArguments().size(); x++) {
+                if (ginstance.getArguments().get(x) != null) { //TODO: Wildcards are null arguments.. look into fixing things?
+                  map.put(GenericType.parse("T" + cls.getSignature().fparameters.get(x) + ";"), ginstance.getArguments().get(x));
+                }
+              }
+            }
+
+            if (!map.isEmpty()) {
+              ret = ret.remap(map);
+            }
+          }
+        }
+      }
+
+      VarType _new = this.gatherGenerics(upperBound, ret, desc.getSignature().fparameters, genericArgs);
+      if (desc.getSignature().ret != _new) {
+        return _new;
+      }
+    }
+
+    return getExprType();
+  }
+
+
   @Override
   public CheckTypesResult checkExprTypeBounds() {
     CheckTypesResult result = new CheckTypesResult();
@@ -287,6 +338,7 @@ public class InvocationExprent extends Exprent {
 
         if (buf.length() > 0) {
           buf.append(".");
+          this.appendParameters(buf, genericArgs);
         }
 
         buf.append(name);
@@ -333,8 +385,30 @@ public class InvocationExprent extends Exprent {
         isEnum = newNode.classStruct.hasModifier(CodeConstants.ACC_ENUM) && DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_ENUM);
       }
     }
+    List<StructMethod> matches = getMatchedDescriptors();
+    BitSet setAmbiguousParameters = getAmbiguousParameters(matches);
+    StructMethod desc = null;
+    if(matches.size() == 1) {
+      desc = matches.get(0);
+    }
 
-    BitSet setAmbiguousParameters = getAmbiguousParameters();
+    StructClass cl = DecompilerContext.getStructContext().getClass(classname);
+    Map<VarType, VarType> genArgs = new HashMap<VarType, VarType>();
+
+    // building generic info from the instance
+    VarType inferred = instance == null ? null : instance.getInferredExprType(null);
+    if (cl != null && cl.getSignature() != null && instance != null && inferred.isGeneric()) {
+      GenericType genType = (GenericType)inferred;
+      if (genType.getArguments().size() == cl.getSignature().fparameters.size()) {
+        for (int i = 0; i < cl.getSignature().fparameters.size(); i++) {
+          VarType from = GenericType.parse("T" + cl.getSignature().fparameters.get(i) + ";");
+          VarType to = genType.getArguments().get(i);
+          if (from != null && to != null) {
+            genArgs.put(from, to);
+          }
+        }
+      }
+    }
 
     boolean firstParameter = true;
     int start = isEnum ? 2 : 0;
@@ -346,6 +420,33 @@ public class InvocationExprent extends Exprent {
 
         TextBuffer buff = new TextBuffer();
         boolean ambiguous = setAmbiguousParameters.get(i);
+        VarType type = descriptor.params[i];
+
+        // using info from the generic signature
+        if (desc != null && desc.getSignature() != null && desc.getSignature().params.size() == lstParameters.size()) {
+          type = desc.getSignature().params.get(i);
+        }
+
+        // applying generic info from the signature
+        VarType remappedType = type.remap(genArgs);
+        if(type != remappedType) {
+          type = remappedType;
+        }
+        else if (desc != null && desc.getSignature() != null && genericArgs.size() != 0) { // and from the inferred generic arguments
+          Map<VarType, VarType> genMap = new HashMap<VarType, VarType>();
+          for (int j = 0; j < genericArgs.size(); j++) {
+            VarType from = GenericType.parse("T" + desc.getSignature().fparameters.get(j) + ";");
+            VarType to = genericArgs.get(j);
+            genMap.put(from, to);
+          }
+        }
+
+        // not passing it along if what we get back is more specific
+        VarType exprType = lstParameters.get(i).getInferredExprType(type);
+        if (exprType != null && type != null && type.type == CodeConstants.TYPE_GENVAR) {
+          //type = exprType;
+        }
+
         ExprProcessor.getCastedExprent(lstParameters.get(i), descriptor.params[i], buff, indent, true, ambiguous, tracer);
         buf.append(buff);
 
@@ -358,12 +459,11 @@ public class InvocationExprent extends Exprent {
     return buf;
   }
 
-  private BitSet getAmbiguousParameters() {
+  private List<StructMethod> getMatchedDescriptors() {
+    List<StructMethod> matches = new ArrayList<StructMethod>();
     StructClass cl = DecompilerContext.getStructContext().getClass(classname);
-    if (cl == null) return EMPTY_BIT_SET;
+    if (cl == null) return matches;
 
-    // check number of matches
-    List<MethodDescriptor> matches = new ArrayList<>();
     nextMethod:
     for (StructMethod mt : cl.getMethods()) {
       if (name.equals(mt.getName())) {
@@ -374,11 +474,19 @@ public class InvocationExprent extends Exprent {
               continue nextMethod;
             }
           }
-          matches.add(md);
+          matches.add(mt);
         }
       }
     }
-    if (matches.size() == 1) return EMPTY_BIT_SET;
+
+    return matches;
+  }
+
+  private BitSet getAmbiguousParameters(List<StructMethod> matches) {
+    StructClass cl = DecompilerContext.getStructContext().getClass(classname);
+    if (cl == null || matches.size() == 1) {
+      return EMPTY_BIT_SET;
+    }
 
     // check if a call is unambiguous
     StructMethod mt = cl.getMethod(InterpreterUtil.makeUniqueKey(name, stringDescriptor));
@@ -392,7 +500,9 @@ public class InvocationExprent extends Exprent {
             break;
           }
         }
-        if (exact) return EMPTY_BIT_SET;
+        if (exact) {
+          return EMPTY_BIT_SET;
+        }
       }
     }
 
@@ -400,7 +510,13 @@ public class InvocationExprent extends Exprent {
     BitSet ambiguous = new BitSet(descriptor.params.length);
     for (int i = 0; i < descriptor.params.length; i++) {
       VarType paramType = descriptor.params[i];
-      for (MethodDescriptor md : matches) {
+      for (StructMethod mtt : matches) {
+
+        if (mtt.getSignature() != null && mtt.getSignature().params.get(i).isGeneric()) {
+          break;
+        }
+
+        MethodDescriptor md = MethodDescriptor.parseDescriptor(mtt.getDescriptor());
         if (!paramType.equals(md.params[i])) {
           ambiguous.set(i);
           break;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
index da3f3aa..324e016 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
@@ -29,7 +29,6 @@ import org.jetbrains.java.decompiler.modules.decompiler.vars.VarVersionPair;
 import org.jetbrains.java.decompiler.struct.StructClass;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
 import org.jetbrains.java.decompiler.struct.gen.generics.GenericClassDescriptor;
-import org.jetbrains.java.decompiler.struct.gen.generics.GenericMain;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 import org.jetbrains.java.decompiler.util.ListStack;
 
@@ -47,6 +46,7 @@ public class NewExprent extends Exprent {
   private boolean anonymous;
   private boolean lambda;
   private boolean enumConst;
+  private List<VarType> genericArgs = new ArrayList<>();
 
   public NewExprent(VarType newType, ListStack<Exprent> stack, int arrayDim, BitSet bytecodeOffsets) {
     this(newType, getDimensions(arrayDim, stack), bytecodeOffsets);
@@ -86,6 +86,24 @@ public class NewExprent extends Exprent {
   }
 
   @Override
+  public VarType getInferredExprType(VarType upperBound) {
+    genericArgs.clear();
+    if (newType.type == CodeConstants.TYPE_OBJECT && newType.arrayDim == 0) {
+      StructClass node = DecompilerContext.getStructContext().getClass(newType.value);
+
+      if (node != null && node.getSignature() != null) {
+        GenericClassDescriptor sig = node.getSignature();
+        VarType _new = this.gatherGenerics(upperBound, sig.genericType, sig.fparameters, genericArgs);
+        if (sig.genericType != _new) {
+          return _new;
+        }
+      }
+    }
+    
+    return getExprType();
+  }
+
+  @Override
   public CheckTypesResult checkExprTypeBounds() {
     CheckTypesResult result = new CheckTypesResult();
 
@@ -185,17 +203,17 @@ public class NewExprent extends Exprent {
           }
         }
 
-        GenericClassDescriptor descriptor = ClassWriter.getGenericClassDescriptor(child.classStruct);
+        GenericClassDescriptor descriptor = child.getWrapper().getClassStruct().getSignature();
         if (descriptor != null) {
           if (descriptor.superinterfaces.isEmpty()) {
-            buf.append(GenericMain.getGenericCastTypeName(descriptor.superclass));
+            buf.append(ExprProcessor.getCastTypeName(descriptor.superclass));
           }
           else {
             if (descriptor.superinterfaces.size() > 1 && !lambda) {
               DecompilerContext.getLogger().writeMessage("Inconsistent anonymous class signature: " + child.classStruct.qualifiedName,
                                                          IFernflowerLogger.Severity.WARN);
             }
-            buf.append(GenericMain.getGenericCastTypeName(descriptor.superinterfaces.get(0)));
+            buf.append(ExprProcessor.getCastTypeName(descriptor.superinterfaces.get(0)));
           }
         }
         else {
@@ -203,6 +221,7 @@ public class NewExprent extends Exprent {
         }
       }
 
+      appendParameters(buf, genericArgs);
       buf.append('(');
 
       if (!lambda && constructor != null) {
@@ -320,6 +339,7 @@ public class NewExprent extends Exprent {
 
         int start = enumConst ? 2 : 0;
         if (!enumConst || start < lstParameters.size()) {
+          appendParameters(buf, genericArgs);
           buf.append('(');
 
           boolean firstParam = true;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
index f5d8cbe..ef50fe3 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
@@ -37,6 +37,7 @@ import org.jetbrains.java.decompiler.struct.attr.StructLocalVariableTypeTableAtt
 import org.jetbrains.java.decompiler.struct.gen.VarType;
 import org.jetbrains.java.decompiler.struct.gen.generics.GenericFieldDescriptor;
 import org.jetbrains.java.decompiler.struct.gen.generics.GenericMain;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericType;
 import org.jetbrains.java.decompiler.struct.match.MatchEngine;
 import org.jetbrains.java.decompiler.struct.match.MatchNode;
 import org.jetbrains.java.decompiler.struct.match.MatchNode.RuleValue;
@@ -80,6 +81,22 @@ public class VarExprent extends Exprent {
   }
 
   @Override
+  public VarType getInferredExprType(VarType upperBound) {
+    if (lvt != null && lvt.getSignature() != null) {
+      // TODO; figure out why it's crashing, ugly fix for now
+      try {
+        return GenericType.parse(lvt.getSignature());
+      } catch (StringIndexOutOfBoundsException ex) {
+        ex.printStackTrace();
+      }
+    }
+    else if (lvt != null) {
+      return lvt.getVarType();
+    }
+    return getVarType();
+  }
+
+  @Override
   public int getExprentUse() {
     return Exprent.MULTIPLE_USES | Exprent.SIDE_EFFECTS_FREE;
   }
@@ -156,7 +173,7 @@ public class VarExprent extends Exprent {
           if (lvt.getSignature() != null) {
             GenericFieldDescriptor descriptor = GenericMain.parseFieldSignature(lvt.getSignature());
             if (descriptor != null) {
-              buffer.append(GenericMain.getGenericCastTypeName(descriptor.type));
+              buffer.append(ExprProcessor.getCastTypeName(descriptor.type));
               return;
             }
           }
@@ -182,7 +199,7 @@ public class VarExprent extends Exprent {
               if (signature != null) {
                 GenericFieldDescriptor descriptor = GenericMain.parseFieldSignature(signature);
                 if (descriptor != null) {
-                  buffer.append(GenericMain.getGenericCastTypeName(descriptor.type));
+                  buffer.append(ExprProcessor.getCastTypeName(descriptor.type));
                   return;
                 }
               }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java
index bb55e0f..55bbc2c 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/stats/DoStatement.java
@@ -139,6 +139,7 @@ public class DoStatement extends Statement {
         break;
       case LOOP_FOREACH:
         buf.appendIndent(indent).append("for(").append(initExprent.get(0).toJava(indent, tracer));
+        incExprent.get(0).getInferredExprType(null); //TODO: Find a better then null? For now just calls it to clear casts if needed
         buf.append(" : ").append(incExprent.get(0).toJava(indent, tracer)).append(") {").appendLineSeparator();
         tracer.incrementCurrentSourceLine();
         buf.append(ExprProcessor.jmpWrapper(first, indent + 1, true, tracer));
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
index 16cbc34..e46116f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/vars/VarDefinitionHelper.java
@@ -908,7 +908,7 @@ public class VarDefinitionHelper {
     String cast;
     private VarInfo(LocalVariable lvt, VarType type) {
       if (lvt != null && lvt.getSignature() != null) {
-        cast = GenericMain.getGenericCastTypeName(new GenericType(lvt.getSignature()));
+        cast = ExprProcessor.getCastTypeName(GenericType.parse(lvt.getSignature()));
       }
       else if (lvt != null) {
         cast = ExprProcessor.getCastTypeName(lvt.getVarType(), false);
diff --git a/src/org/jetbrains/java/decompiler/struct/StructClass.java b/src/org/jetbrains/java/decompiler/struct/StructClass.java
index 1c1a930..c68d329 100644
--- a/src/org/jetbrains/java/decompiler/struct/StructClass.java
+++ b/src/org/jetbrains/java/decompiler/struct/StructClass.java
@@ -16,8 +16,14 @@
 package org.jetbrains.java.decompiler.struct;
 
 import org.jetbrains.java.decompiler.code.CodeConstants;
+import org.jetbrains.java.decompiler.main.DecompilerContext;
+import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
+import org.jetbrains.java.decompiler.struct.attr.StructGeneralAttribute;
+import org.jetbrains.java.decompiler.struct.attr.StructGenericSignatureAttribute;
 import org.jetbrains.java.decompiler.struct.consts.ConstantPool;
 import org.jetbrains.java.decompiler.struct.consts.PrimitiveConstant;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericClassDescriptor;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMain;
 import org.jetbrains.java.decompiler.struct.lazy.LazyLoader;
 import org.jetbrains.java.decompiler.util.DataInputFullStream;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
@@ -61,6 +67,7 @@ public class StructClass extends StructMember {
   private final VBStyleCollection<StructField, String> fields;
   private final VBStyleCollection<StructMethod, String> methods;
   private final Map<String, Map<Integer, String>> enumSwitchMap = new HashMap<>();
+  private GenericClassDescriptor signature = null;
 
   private ConstantPool pool;
 
@@ -206,4 +213,18 @@ public class StructClass extends StructMember {
   public String toString() {
     return qualifiedName;
   }
+
+  public GenericClassDescriptor getSignature() {
+    return signature;
+  }
+
+  @Override
+  protected StructGeneralAttribute readAttribute(DataInputFullStream in, ConstantPool pool, String name) throws IOException {
+    StructGeneralAttribute attribute = super.readAttribute(in, pool, name);
+    if ("Signature".equals(name) && DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES)) {
+      StructGenericSignatureAttribute signature = (StructGenericSignatureAttribute)attribute;
+      this.signature = GenericMain.parseClassSignature(qualifiedName, signature.getSignature());
+    }
+    return attribute;
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/struct/StructField.java b/src/org/jetbrains/java/decompiler/struct/StructField.java
index 87ba1d8..438746b 100644
--- a/src/org/jetbrains/java/decompiler/struct/StructField.java
+++ b/src/org/jetbrains/java/decompiler/struct/StructField.java
@@ -15,7 +15,13 @@
  */
 package org.jetbrains.java.decompiler.struct;
 
+import org.jetbrains.java.decompiler.main.DecompilerContext;
+import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
+import org.jetbrains.java.decompiler.struct.attr.StructGeneralAttribute;
+import org.jetbrains.java.decompiler.struct.attr.StructGenericSignatureAttribute;
 import org.jetbrains.java.decompiler.struct.consts.ConstantPool;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericFieldDescriptor;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMain;
 import org.jetbrains.java.decompiler.util.DataInputFullStream;
 
 import java.io.IOException;
@@ -33,7 +39,7 @@ public class StructField extends StructMember {
 
   private final String name;
   private final String descriptor;
-
+  private GenericFieldDescriptor signature;
 
   public StructField(DataInputFullStream in, StructClass clStruct) throws IOException {
     accessFlags = in.readUnsignedShort();
@@ -60,4 +66,18 @@ public class StructField extends StructMember {
   public String toString() {
     return name;
   }
+
+  public GenericFieldDescriptor getSignature() {
+    return signature;
+  }
+
+  @Override
+  protected StructGeneralAttribute readAttribute(DataInputFullStream in, ConstantPool pool, String name) throws IOException {
+    StructGeneralAttribute attribute = super.readAttribute(in, pool, name);
+    if ("Signature".equals(name) && DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES)) {
+      StructGenericSignatureAttribute signature = (StructGenericSignatureAttribute)attribute;
+      this.signature = GenericMain.parseFieldSignature(signature.getSignature());
+    }
+    return attribute;
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/struct/StructMethod.java b/src/org/jetbrains/java/decompiler/struct/StructMethod.java
index d398c5e..1067c62 100644
--- a/src/org/jetbrains/java/decompiler/struct/StructMethod.java
+++ b/src/org/jetbrains/java/decompiler/struct/StructMethod.java
@@ -16,9 +16,14 @@
 package org.jetbrains.java.decompiler.struct;
 
 import org.jetbrains.java.decompiler.code.*;
+import org.jetbrains.java.decompiler.main.DecompilerContext;
+import org.jetbrains.java.decompiler.main.extern.IFernflowerPreferences;
 import org.jetbrains.java.decompiler.struct.attr.StructGeneralAttribute;
+import org.jetbrains.java.decompiler.struct.attr.StructGenericSignatureAttribute;
 import org.jetbrains.java.decompiler.struct.attr.StructLocalVariableTableAttribute;
 import org.jetbrains.java.decompiler.struct.consts.ConstantPool;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMain;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMethodDescriptor;
 import org.jetbrains.java.decompiler.util.DataInputFullStream;
 import org.jetbrains.java.decompiler.util.VBStyleCollection;
 
@@ -46,6 +51,7 @@ public class StructMethod extends StructMember {
   private final StructClass classStruct;
   private final String name;
   private final String descriptor;
+  private GenericMethodDescriptor signature;
 
   private boolean containsCode = false;
   private int localVariables = 0;
@@ -99,7 +105,13 @@ public class StructMethod extends StructMember {
       return null;
     }
 
-    return super.readAttribute(in, pool, name);
+    StructGeneralAttribute attribute = super.readAttribute(in, pool, name);
+    if ("Signature".equals(name) && DecompilerContext.getOption(IFernflowerPreferences.DECOMPILE_GENERIC_SIGNATURES)) {
+      StructGenericSignatureAttribute signature = (StructGenericSignatureAttribute)attribute;
+      this.signature = GenericMain.parseMethodSignature(signature.getSignature());
+    }
+
+    return attribute;
   }
 
   public void expandData() throws IOException {
@@ -398,4 +410,8 @@ public class StructMethod extends StructMember {
   public String toString() {
     return name;
   }
+
+  public GenericMethodDescriptor getSignature() {
+    return signature;
+  }
 }
\ No newline at end of file
diff --git a/src/org/jetbrains/java/decompiler/struct/gen/MethodDescriptor.java b/src/org/jetbrains/java/decompiler/struct/gen/MethodDescriptor.java
index 3b5abb4..7d55d7e 100644
--- a/src/org/jetbrains/java/decompiler/struct/gen/MethodDescriptor.java
+++ b/src/org/jetbrains/java/decompiler/struct/gen/MethodDescriptor.java
@@ -16,6 +16,7 @@
 package org.jetbrains.java.decompiler.struct.gen;
 
 import org.jetbrains.java.decompiler.code.CodeConstants;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericMethodDescriptor;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -25,6 +26,7 @@ public class MethodDescriptor {
 
   public final VarType[] params;
   public final VarType ret;
+  public GenericMethodDescriptor genericInfo;
 
   private MethodDescriptor(VarType[] params, VarType ret) {
     this.params = params;
@@ -78,6 +80,10 @@ public class MethodDescriptor {
     return new MethodDescriptor(params, ret);
   }
 
+  public void addGenericDescriptor(GenericMethodDescriptor desc) {
+    this.genericInfo = desc;
+  }
+
   public String buildNewDescriptor(NewClassNameBuilder builder) {
     boolean updated = false;
 
diff --git a/src/org/jetbrains/java/decompiler/struct/gen/VarType.java b/src/org/jetbrains/java/decompiler/struct/gen/VarType.java
index 1eb177f..d19bc7f 100644
--- a/src/org/jetbrains/java/decompiler/struct/gen/VarType.java
+++ b/src/org/jetbrains/java/decompiler/struct/gen/VarType.java
@@ -15,7 +15,10 @@
  */
 package org.jetbrains.java.decompiler.struct.gen;
 
+import java.util.Map;
+
 import org.jetbrains.java.decompiler.code.CodeConstants;
+import org.jetbrains.java.decompiler.struct.gen.generics.GenericType;
 import org.jetbrains.java.decompiler.util.InterpreterUtil;
 
 public class VarType {  // TODO: optimize switch
@@ -59,7 +62,7 @@ public class VarType {  // TODO: optimize switch
     this(type, arrayDim, value, getFamily(type, arrayDim), getStackSize(type, arrayDim), false);
   }
 
-  private VarType(int type, int arrayDim, String value, int typeFamily, int stackSize, boolean falseBoolean) {
+  protected VarType(int type, int arrayDim, String value, int typeFamily, int stackSize, boolean falseBoolean) {
     this.type = type;
     this.arrayDim = arrayDim;
     this.value = value;
@@ -151,7 +154,7 @@ public class VarType {  // TODO: optimize switch
     }
   }
 
-  private static int getStackSize(int type, int arrayDim) {
+  protected static int getStackSize(int type, int arrayDim) {
     if (arrayDim > 0) {
       return 1;
     }
@@ -168,7 +171,7 @@ public class VarType {  // TODO: optimize switch
     }
   }
 
-  private static int getFamily(int type, int arrayDim) {
+  protected static int getFamily(int type, int arrayDim) {
     if (arrayDim > 0) {
       return CodeConstants.TYPE_FAMILY_OBJECT;
     }
@@ -270,6 +273,15 @@ public class VarType {  // TODO: optimize switch
   }
 
   @Override
+  public int hashCode() {
+    int result = 1;
+    result = 37 * result + type;
+    result = 37 * result + arrayDim;
+    result = 37 * result + value == null ? 0 : value.hashCode();
+    return result;
+  }
+
+  @Override
   public boolean equals(Object o) {
     if (o == this) {
       return true;
@@ -415,4 +427,15 @@ public class VarType {  // TODO: optimize switch
         throw new IllegalArgumentException("Invalid type: " + c);
     }
   }
+
+  public boolean isGeneric() {
+    return false;
+  }
+
+  public VarType remap(Map<VarType, VarType> map) {
+    if (map.containsKey(this)) {
+      return map.get(this);
+    }
+    return this;
+  }
 }
diff --git a/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericClassDescriptor.java b/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericClassDescriptor.java
index 077814c..c6452c7 100644
--- a/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericClassDescriptor.java
+++ b/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericClassDescriptor.java
@@ -18,13 +18,17 @@ package org.jetbrains.java.decompiler.struct.gen.generics;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.jetbrains.java.decompiler.struct.gen.VarType;
+
 public class GenericClassDescriptor {
 
-  public GenericType superclass;
+  public VarType superclass;
+
+  public GenericType genericType;
 
-  public final List<GenericType> superinterfaces = new ArrayList<>();
+  public final List<VarType> superinterfaces = new ArrayList<>();
 
   public final List<String> fparameters = new ArrayList<>();
 
-  public final List<List<GenericType>> fbounds = new ArrayList<>();
+  public final List<List<VarType>> fbounds = new ArrayList<>();
 }
diff --git a/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericFieldDescriptor.java b/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericFieldDescriptor.java
index 598d17b..9857f60 100644
--- a/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericFieldDescriptor.java
+++ b/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericFieldDescriptor.java
@@ -15,7 +15,9 @@
  */
 package org.jetbrains.java.decompiler.struct.gen.generics;
 
+import org.jetbrains.java.decompiler.struct.gen.VarType;
+
 public class GenericFieldDescriptor {
 
-  public GenericType type;
+  public VarType type;
 }
diff --git a/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericMain.java b/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericMain.java
index a5760a3..e915d62 100644
--- a/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericMain.java
+++ b/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericMain.java
@@ -18,6 +18,7 @@ package org.jetbrains.java.decompiler.struct.gen.generics;
 import org.jetbrains.java.decompiler.code.CodeConstants;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.main.extern.IFernflowerLogger;
+import org.jetbrains.java.decompiler.struct.gen.VarType;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -35,7 +36,7 @@ public class GenericMain {
     "boolean",
   };
 
-  public static GenericClassDescriptor parseClassSignature(String signature) {
+  public static GenericClassDescriptor parseClassSignature(String qualifiedName, String signature) {
     String original = signature;
     try {
       GenericClassDescriptor descriptor = new GenericClassDescriptor();
@@ -43,15 +44,23 @@ public class GenericMain {
       signature = parseFormalParameters(signature, descriptor.fparameters, descriptor.fbounds);
 
       String superCl = GenericType.getNextType(signature);
-      descriptor.superclass = new GenericType(superCl);
+      descriptor.superclass = GenericType.parse(superCl);
 
       signature = signature.substring(superCl.length());
       while (signature.length() > 0) {
         String superIf = GenericType.getNextType(signature);
-        descriptor.superinterfaces.add(new GenericType(superIf));
+        descriptor.superinterfaces.add(GenericType.parse(superIf));
         signature = signature.substring(superIf.length());
       }
 
+      StringBuilder buf = new StringBuilder();
+      buf.append('L').append(qualifiedName).append('<');
+      for (String t : descriptor.fparameters) {
+        buf.append('T').append(t).append(';');
+      }
+      buf.append(">;");
+      descriptor.genericType = (GenericType)GenericType.parse(buf.toString());
+
       return descriptor;
     }
     catch (RuntimeException e) {
@@ -63,7 +72,7 @@ public class GenericMain {
   public static GenericFieldDescriptor parseFieldSignature(String signature) {
     try {
       GenericFieldDescriptor descriptor = new GenericFieldDescriptor();
-      descriptor.type = new GenericType(signature);
+      descriptor.type = GenericType.parse(signature);
       return descriptor;
     }
     catch (RuntimeException e) {
@@ -85,19 +94,19 @@ public class GenericMain {
 
       while (pars.length() > 0) {
         String par = GenericType.getNextType(pars);
-        descriptor.params.add(new GenericType(par));
+        descriptor.params.add(GenericType.parse(par));
         pars = pars.substring(par.length());
       }
 
       String par = GenericType.getNextType(signature);
-      descriptor.ret = new GenericType(par);
+      descriptor.ret = GenericType.parse(par);
       signature = signature.substring(par.length());
 
       if (signature.length() > 0) {
         String[] exceptions = signature.split("\\^");
 
         for (int i = 1; i < exceptions.length; i++) {
-          descriptor.exceptions.add(new GenericType(exceptions[i]));
+          descriptor.exceptions.add(GenericType.parse(exceptions[i]));
         }
       }
 
@@ -109,7 +118,7 @@ public class GenericMain {
     }
   }
 
-  private static String parseFormalParameters(String signature, List<String> parameters, List<List<GenericType>> bounds) {
+  private static String parseFormalParameters(String signature, List<String> parameters, List<List<VarType>> bounds) {
     if (signature.charAt(0) != '<') {
       return signature;
     }
@@ -142,7 +151,7 @@ public class GenericMain {
       String param = value.substring(0, to);
       value = value.substring(to + 1);
 
-      List<GenericType> lstBounds = new ArrayList<>();
+      List<VarType> lstBounds = new ArrayList<>();
 
       while (true) {
         if (value.charAt(0) == ':') {
@@ -151,7 +160,7 @@ public class GenericMain {
         }
 
         String bound = GenericType.getNextType(value);
-        lstBounds.add(new GenericType(bound));
+        lstBounds.add(GenericType.parse(bound));
         value = value.substring(bound.length());
 
 
@@ -191,69 +200,9 @@ public class GenericMain {
       return type.value;
     }
     else if (tp == CodeConstants.TYPE_OBJECT) {
-      StringBuilder buffer = new StringBuilder();
-      appendClassName(type, buffer);
-      return buffer.toString();
+      return type.getCastName();
     }
 
     throw new RuntimeException("Invalid type: " + type);
   }
-
-  private static void appendClassName(GenericType type, StringBuilder buffer) {
-    List<GenericType> enclosingClasses = type.getEnclosingClasses();
-
-    if (enclosingClasses.isEmpty()) {
-      String name = type.value.replace('/', '.');
-      buffer.append(DecompilerContext.getImportCollector().getShortName(name));
-    }
-    else {
-      for (GenericType tp : enclosingClasses) {
-        if (buffer.length() == 0) {
-          buffer.append(DecompilerContext.getImportCollector().getShortName(tp.value.replace('/', '.')));
-        }
-        else {
-          buffer.append(tp.value);
-        }
-
-        appendTypeArguments(tp, buffer);
-        buffer.append('.');
-      }
-
-      buffer.append(type.value);
-    }
-
-    appendTypeArguments(type, buffer);
-  }
-
-  private static void appendTypeArguments(GenericType type, StringBuilder buffer) {
-    if (!type.getArguments().isEmpty()) {
-      buffer.append('<');
-
-      for (int i = 0; i < type.getArguments().size(); i++) {
-        if (i > 0) {
-          buffer.append(", ");
-        }
-
-        int wildcard = type.getWildcards().get(i);
-        switch (wildcard) {
-          case GenericType.WILDCARD_UNBOUND:
-            buffer.append('?');
-            break;
-          case GenericType.WILDCARD_EXTENDS:
-            buffer.append("? extends ");
-            break;
-          case GenericType.WILDCARD_SUPER:
-            buffer.append("? super ");
-            break;
-        }
-
-        GenericType genPar = type.getArguments().get(i);
-        if (genPar != null) {
-          buffer.append(getGenericCastTypeName(genPar));
-        }
-      }
-
-      buffer.append(">");
-    }
-  }
 }
diff --git a/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericMethodDescriptor.java b/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericMethodDescriptor.java
index 2d38084..51b6b37 100644
--- a/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericMethodDescriptor.java
+++ b/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericMethodDescriptor.java
@@ -18,15 +18,17 @@ package org.jetbrains.java.decompiler.struct.gen.generics;
 import java.util.ArrayList;
 import java.util.List;
 
+import org.jetbrains.java.decompiler.struct.gen.VarType;
+
 public class GenericMethodDescriptor {
 
   public final List<String> fparameters = new ArrayList<>();
 
-  public final List<List<GenericType>> fbounds = new ArrayList<>();
+  public final List<List<VarType>> fbounds = new ArrayList<>();
 
-  public final List<GenericType> params = new ArrayList<>();
+  public final List<VarType> params = new ArrayList<>();
 
-  public GenericType ret;
+  public VarType ret;
 
-  public final List<GenericType> exceptions = new ArrayList<>();
+  public final List<VarType> exceptions = new ArrayList<>();
 }
diff --git a/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericType.java b/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericType.java
index ee71f5b..e1af5f2 100644
--- a/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericType.java
+++ b/src/org/jetbrains/java/decompiler/struct/gen/generics/GenericType.java
@@ -16,36 +16,43 @@
 package org.jetbrains.java.decompiler.struct.gen.generics;
 
 import org.jetbrains.java.decompiler.code.CodeConstants;
+import org.jetbrains.java.decompiler.main.DecompilerContext;
+import org.jetbrains.java.decompiler.modules.decompiler.ExprProcessor;
 import org.jetbrains.java.decompiler.struct.gen.VarType;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
+import java.util.Map;
 
-public class GenericType {
+public class GenericType extends VarType {
 
   public static final int WILDCARD_EXTENDS = 1;
   public static final int WILDCARD_SUPER = 2;
   public static final int WILDCARD_UNBOUND = 3;
   public static final int WILDCARD_NO = 4;
 
-  public final int type;
-  public final int arrayDim;
-  public final String value;
+  private final VarType parent;
+  private final List<VarType> arguments;
+  private final int wildcard;
 
-  private final List<GenericType> enclosingClasses = new ArrayList<>();
-  private final List<GenericType> arguments = new ArrayList<>();
-  private final List<Integer> wildcards = new ArrayList<>();
+  public GenericType(int type, int arrayDim, String value, VarType parent, List<VarType> arguments, int wildcard) {
+    super(type, arrayDim, value, getFamily(type, arrayDim), getStackSize(type, arrayDim), false);
+    this.parent = parent;
+    this.arguments = arguments == null ? Collections.<VarType>emptyList() : arguments;
+    this.wildcard = wildcard;
+  }
 
-  public GenericType(int type, int arrayDim, String value) {
-    this.type = type;
-    this.arrayDim = arrayDim;
-    this.value = value;
+  public static VarType parse(String signature) {
+    return parse(signature, WILDCARD_NO);
   }
 
-  public GenericType(String signature) {
+  public static VarType parse(String signature, int wildcard) {
     int type = 0;
     int arrayDim = 0;
     String value = null;
+    List<VarType> params = null;
+    VarType parent = null;
 
     int index = 0;
     loop:
@@ -63,32 +70,54 @@ public class GenericType {
         case 'L':
           type = CodeConstants.TYPE_OBJECT;
           signature = signature.substring(index + 1, signature.length() - 1);
+          String cl = getNextClassSignature(signature);
 
-          while (true) {
-            String cl = getNextClassSignature(signature);
-
-            String name = cl;
-            String args = null;
-
-            int argStart = cl.indexOf("<");
+          if (cl.length() == signature.length()) {
+            int argStart = cl.indexOf('<');
             if (argStart >= 0) {
-              name = cl.substring(0, argStart);
-              args = cl.substring(argStart + 1, cl.length() - 1);
-            }
-
-            if (cl.length() < signature.length()) {
-              signature = signature.substring(cl.length() + 1); // skip '.'
-              GenericType type11 = new GenericType(CodeConstants.TYPE_OBJECT, 0, name);
-              parseArgumentsList(args, type11);
-              enclosingClasses.add(type11);
+              value = cl.substring(0, argStart);
+              params = parseArgumentsList(cl.substring(argStart + 1, cl.length() - 1));
             }
             else {
-              value = name;
-              parseArgumentsList(args, this);
-              break;
+              value = cl;
+            }
+          }
+          else {
+            StringBuilder name_buff = new StringBuilder();
+            while (signature.length() > 0) {
+              String name = cl;
+              String args = null;
+
+              int argStart = cl.indexOf('<');
+              if (argStart >= 0) {
+                name = cl.substring(0, argStart);
+                args = cl.substring(argStart + 1, cl.length() - 1);
+              }
+
+              if (name_buff.length() > 0) {
+                name_buff.append('$');
+              }
+              name_buff.append(name);
+
+              value = name_buff.toString();
+              params = args == null ? null : parseArgumentsList(args);
+
+              if (cl.length() == signature.length()) {
+                break;
+              }
+              else {
+                if (parent == null && params == null) {
+                  parent = GenericType.parse("L" + value + ";");
+                }
+                else {
+                  parent = new GenericType(CodeConstants.TYPE_OBJECT, 0, value, parent, params, wildcard);
+                }
+
+                signature = signature.substring(cl.length() + 1);
+              }
+              cl = getNextClassSignature(signature);
             }
           }
-
           break loop;
 
         default:
@@ -99,9 +128,20 @@ public class GenericType {
       index++;
     }
 
-    this.type = type;
-    this.arrayDim = arrayDim;
-    this.value = value;
+    if (type == CodeConstants.TYPE_GENVAR) {
+      return new GenericType(type, arrayDim, value, null, null, wildcard);
+    }
+    else if (type == CodeConstants.TYPE_OBJECT) {
+      if (parent == null && params == null && wildcard == WILDCARD_NO) {
+        return new VarType(type, arrayDim, value);
+      }
+      else {
+        return new GenericType(type, arrayDim, value, parent, params, wildcard);
+      }
+    }
+    else {
+      return new VarType(type, arrayDim, value);
+    }
   }
 
   private static String getNextClassSignature(String value) {
@@ -129,11 +169,13 @@ public class GenericType {
     return value.substring(0, index);
   }
 
-  private static void parseArgumentsList(String value, GenericType type) {
+  private static List<VarType> parseArgumentsList(String value) {
     if (value == null) {
-      return;
+      return null;
     }
 
+    List<VarType> args = new ArrayList<VarType>();
+
     while (value.length() > 0) {
       String typeStr = getNextType(value);
       int len = typeStr.length();
@@ -151,16 +193,16 @@ public class GenericType {
           break;
       }
 
-      type.getWildcards().add(wildcard);
-
       if (wildcard != WILDCARD_NO) {
         typeStr = typeStr.substring(1);
       }
 
-      type.getArguments().add(typeStr.length() == 0 ? null : new GenericType(typeStr));
+      args.add(typeStr.length() == 0 ? null : GenericType.parse(typeStr, wildcard));
 
       value = value.substring(len);
     }
+
+    return args;
   }
 
   public static String getNextType(String value) {
@@ -211,18 +253,120 @@ public class GenericType {
 
   public GenericType decreaseArrayDim() {
     assert arrayDim > 0 : this;
-    return new GenericType(type, arrayDim - 1, value);
+    return new GenericType(type, arrayDim - 1, value, parent, arguments, wildcard);
   }
 
-  public List<GenericType> getArguments() {
+  public VarType getParent() {
+    return parent;
+  }
+
+  public List<VarType> getArguments() {
     return arguments;
   }
+  @Override
+  public boolean isGeneric() {
+    return true;
+  }
 
-  public List<GenericType> getEnclosingClasses() {
-    return enclosingClasses;
+  public int getWildcard() {
+    return wildcard;
   }
 
-  public List<Integer> getWildcards() {
-    return wildcards;
+  public String getCastName() {
+    String clsName = null;
+    if (parent == null) {
+      clsName = DecompilerContext.getImportCollector().getShortName(value.replace('/', '.'));
+    }
+    else if (parent.isGeneric()) {
+      clsName = ((GenericType)parent).getCastName() + "." + value.substring(parent.value.length() + 1);
+    }
+    else {
+      clsName = DecompilerContext.getImportCollector().getShortName(parent.value.replace('/', '.')) + "." + value.substring(value.lastIndexOf('.') + 1);
+    }
+    return clsName + getTypeArguments();
+  }
+
+  private String getTypeArguments() {
+    StringBuilder buffer = new StringBuilder();
+    if (!arguments.isEmpty()) {
+      buffer.append('<');
+
+      for (int i = 0; i < arguments.size(); i++) {
+        if (i > 0) {
+          buffer.append(", ");
+        }
+
+        VarType par = arguments.get(i);
+        if (par == null) { // Wildcard unbound
+          buffer.append('?');
+        }
+        else if (par.isGeneric()) {
+          GenericType gen = (GenericType)par;
+          switch (gen.getWildcard()) {
+            case GenericType.WILDCARD_EXTENDS:
+              buffer.append("? extends ");
+              break;
+            case GenericType.WILDCARD_SUPER:
+              buffer.append("? super ");
+              break;
+          }
+          buffer.append(GenericMain.getGenericCastTypeName(gen));
+        }
+        else {
+          buffer.append(ExprProcessor.getCastTypeName(par));
+        }
+      }
+
+      buffer.append(">");
+    }
+    return buffer.toString();
+  }
+
+  @Override
+  public String toString() {
+    StringBuilder buf = new StringBuilder();
+    switch(getWildcard()) {
+      case GenericType.WILDCARD_EXTENDS:
+        buf.append("? extends ");
+        break;
+      case GenericType.WILDCARD_SUPER:
+        buf.append("? super ");
+      break;
+    }
+    buf.append(super.toString());
+    buf.append(getTypeArguments());
+    return buf.toString();
+  }
+
+
+  @Override
+  public VarType remap(Map<VarType, VarType> map) {
+    VarType main = super.remap(map);
+    if (main != this) {
+      return main;
+    }
+    boolean changed = false;
+    VarType parent = getParent();
+    if (map.containsKey(parent)) {
+      parent = map.get(parent);
+      changed = true;
+    }
+    List<VarType> newArgs = new ArrayList<VarType>();
+    for (VarType arg : getArguments()) {
+      VarType newArg = null;
+      if (arg != null) {
+        newArg = arg.remap(map);
+      }
+      if (newArg != arg) {
+        newArgs.add(newArg);
+        changed = true;
+      } else {
+        newArgs.add(arg);
+      }
+    }
+    if (changed) {
+      return new GenericType(main.type, main.arrayDim, main.value, parent, newArgs, getWildcard());
+    }
+    return this;
   }
 }
diff --git a/test/org/jetbrains/java/decompiler/SingleClassesTest.java b/test/org/jetbrains/java/decompiler/SingleClassesTest.java
index 4fb5ebe..32185c5 100644
--- a/test/org/jetbrains/java/decompiler/SingleClassesTest.java
+++ b/test/org/jetbrains/java/decompiler/SingleClassesTest.java
@@ -25,7 +25,8 @@ public class SingleClassesTest extends SingleClassesTestBase {
   protected String[] getDecompilerOptions() {
     return new String[] {
       IFernflowerPreferences.BYTECODE_SOURCE_MAPPING, "1",
-      IFernflowerPreferences.DUMP_ORIGINAL_LINES, "1"
+      IFernflowerPreferences.DUMP_ORIGINAL_LINES, "1",
+      IFernflowerPreferences.INCLUDE_ENTIRE_CLASSPATH, "1"
     };
   }
 
@@ -85,4 +86,5 @@ public class SingleClassesTest extends SingleClassesTestBase {
   @Test public void testAccessReplace() { doTest("pkg/TestAccessReplace"); }
   @Test public void testStringLiterals() { doTest("pkg/TestStringLiterals"); }
   @Test public void testEnhancedForLoops() { doTest("pkg/TestEnhancedForLoops"); }
+  @Test public void testGenerics() { doTest("pkg/TestGenerics"); }
 }
\ No newline at end of file
diff --git a/testData/classes/pkg/TestGenerics$Maps.class b/testData/classes/pkg/TestGenerics$Maps.class
new file mode 100644
index 0000000000000000000000000000000000000000..e62634c0f2f291b9efa6f9cebdb99afcfb4fff54
GIT binary patch
literal 544
zcmZutO;5r=5Pb`U(u(q-h#wbCJb(v#@njJXB%-0}friB6Qa7+z3+adcEj^KF;t%jg
z8E1<JqHMDBX5PG+ot>}m_fG()*f)_wO~<y0jKUoqyA1i33}oD9$Tpe-2CXxF5DX<p
z2I4k(8j8^6L!X$cGxfMX;GtCUFR8_28Bx&<pAi(VgFu8GpGT3Pu<pzrN0uw1xGRX4
zUUZ~%HiH?6mn$BPDP*WMn$Cnjb1R9ZZ~f9FGWv29@Hh$S@ouYkwh;L|7+H72iSS~3
zu!3u^>eh05wmY!f>goP82|aNs)t@TM!=0!hipWE!#J_=b?9r$zKg3W@<x8Ux^;e2R
zXtaNIGN83XCtIM%B4mWQ<2l${nl{MhQ}P@p`Nf3*YuKR3KnZ1PqKXd))hT=+b3aG+
em3&$q*+u;YD&%KSrMsDWTUaMFNu{AqosA#Z7I~xq

literal 0
HcmV?d00001

diff --git a/testData/classes/pkg/TestGenerics.class b/testData/classes/pkg/TestGenerics.class
new file mode 100644
index 0000000000000000000000000000000000000000..c330ce1de228508746d45209da4e5e0e32cb8072
GIT binary patch
literal 3039
zcmb7GT~iZh6n@?$upz7<ARt<;wpvkw;76+xN=qmzH6S&p)!L6GtYIZ=(#=Mt-`}4X
zz35dhdhK0jiZfX1Ovmf~kM>7&+S=!RceA^Jwlgxr?w<3W_nhZE=XrPY>)${B0^m5l
zPGJ{jQ)tFZ8ZM*|$80Nlk=HQSf{VDM;c^N|%qH=&ykC)*tMc+n3fJ&z3m(I38eVV3
z8!%cik3uUJV9LvN4Mn-UsKJsc3(~luVM!V#4a*vAfyA^?sS4;*wrx5SC8Jt3X*ONA
z%+i8Dd+vsD(-^9`R%wWV8G)9(RkRJa=9mJ{G_H<%X34ONLwVP+>|!S3$(G9{)37sR
zOp+{>swzNWYa~a`s=8c_rj;%~uL2RVqjknq+NSvxSE7GnL(V9$EJIXq^QdK8?wCNl
z|KKI^Fi~D$OYJ$!HfL(f^QJRr%$Mlt%#{m9>5}1C()OJRchO>@&Rk`wI5cNg-7_ZX
zvkFzh?`hnyQmJp+u_=0VZag!WRdBWzy$n<Kb<;8J0xKujj4RL;>E^6aUG(NKve_GL
zb2I-_wrdtmM-^-Ji%B*)4Oz!~6!QYTn_%vf8ewPMk(z1{KK3~80`;U5hD_RAs}$73
zBLj^JrOgL=y6j9Eg+&3OSXZKq&R<|l-ZctK1ga*aq0B)vZoX`}iypRm)_kpEIu|Ph
zYpaRNfrhC)6|k{HNzt^q`#F-y!zIu+I_I~kK>0hzl(3Scg_5td3!~%Fu=Ddb%z~TA
zj{FDVQRXDwnXw2uf3rX;U#>X?^Ry+!+7Z>_VcCn0gE*w4f;Xw8@Gy@%j<F(>>Tp0#
zyEh71&0GW5Yq&{KguHmt%GRvXg6RmvvLiZf;kLZ2=y(fnYj{V;yLeB>9_%Hiu&OU#
z4e#st03T}jNXN(cgwxXTDL&KjIlka4VPh>F`><c2EllJgKOnu4XpeUtU*aqJH+Iwz
z>e0u6hdHNQ(=psKTT0pHEgveG=|32eeRu%lMUyh`?w|6P)#QVzL{Q~ds;;@r_e{Aa
zH+adc^3W{bkS@tIjb)0g*{D=Zo3Gr#{>YU5V;n8fKtDG&#QXLCFFxs(y%Yl5>a8^%
zB~K=e2nDo?#9QJgqx;_w@)f!z<dWx*EiIWVc}Y@7y^eZ?(?!^kU=@?J0{VLz!s}z<
z9&OR6&X~8Ek?-uQJeamJ8ruj)5H}V`X9L(eJy)@p-@;w|0LS?yrAon%2CW#Lq)o8}
z_EWSev%v1BE##5nb$~m@c^AAl9l8hcqe__OwOKiPG011#3&3Fv(Hd^>9HG^Mqd~gK
zdb*zwI~S%)5gCX#f!#sM1VfMU2Sk|C^E^!tzo9|O@7ZIVzQOy5U%7`wZXmvnrWhWe
zd3qJveI)5^=}fJmHN6IX4O`aG7MAX0QIMb{3F;y}Y0@LR+T$hlyGoLx6N;uT?7&H!
zB4F8R7$rOPqDBbMi^?!cU^IYwjh1XQxr+7&{ACcL@CY~n4gIQmj~C}x*SPOlQXy2$
za81_q*2cId@LW*o8}65+q*-Yl9Rlm<6vz#%qf6jB^zvbwAVuAhBGS@!=i%=XO@jRc
z9w!52C9Uub5QpSMR^H2s&r=q%kMyRQOOHgA<$o(;f1*vp#2?h6zzYGmZ+&pXtLUlE
zs&^gR9~Iyc4&*379Ha1#2LSg+01j^gC_N1TI|G1|1Q=7I|ABX@is8DXR?(;MO{aYV
zxAQ>}xMOBua2-2ixP0f~Zy|#{XyX18RK!W@=@dbZ5M(A$);_MB#u+uEI>;osKC3h)
zmE}#j4%b_oB8`&SHpKoyhlUpw_FewbKF6H7fMlsX`L~lN?JnB=PVS;7c<PgI1)<4=
hQY_nftoyK)0+0JCr!hl+4CnDU?<qz%bC$c&@(;cmq@Dl(

literal 0
HcmV?d00001

diff --git a/testData/results/TestExtendsList.dec b/testData/results/TestExtendsList.dec
index 6f116db..3f3dbea 100644
--- a/testData/results/TestExtendsList.dec
+++ b/testData/results/TestExtendsList.dec
@@ -2,11 +2,11 @@ package pkg;
 
 public class TestExtendsList {
    static <T extends Comparable<? super T>> T m1(T var0) {
-      return null;// 20
+      return (T)null;// 20
    }
 
    static <T extends Object & Comparable<? super T>> T m2(T var0) {
-      return null;// 24
+      return (T)null;// 24
    }
 }
 
diff --git a/testData/results/TestGenerics.dec b/testData/results/TestGenerics.dec
new file mode 100644
index 0000000..533d1de
--- /dev/null
+++ b/testData/results/TestGenerics.dec
@@ -0,0 +1,166 @@
+package pkg;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class TestGenerics<A, B extends TestGenerics.Maps & List> {
+   static Map<String, Boolean> field = TestGenerics.Maps.<String, Boolean>newHashMap();
+   static List<List<String>> llstring = new ArrayList<List<String>>();
+
+   public static void genericInference() {
+      HashMap<String, Integer> test = TestGenerics.Maps.<String, Integer>newHashMap();// 28
+   }// 29
+
+   public void genericList() {
+      List<B> testList = new ArrayList<B>();// 32
+      B b = testList.get(0);// 33
+      System.out.println("B:" + b);// 34
+   }// 35
+
+   public void genericCast() {
+      HashMap<String, Boolean> upcast = (HashMap)field;// 38
+   }// 39
+
+   public void genericForEach() {
+      for(String s : field.keySet()) {// 42
+         System.out.println(s);// 43
+      }
+// 45
+   }
+
+   public void genericForEachWithCast() {// 48
+      for(String s : llstring.get(0)) {// 49
+         System.out.println(s);
+      }// 51
+
+   }
+
+   public static class Maps {// 55
+      public static <K, V> HashMap<K, V> newHashMap() {
+         return new HashMap<K, V>();
+      }
+   }
+}
+
+class 'pkg/TestGenerics' {
+   method 'genericInference ()V' {
+      0      12
+      1      12
+      2      12
+      3      12
+      4      13
+   }
+
+   method 'genericList ()V' {
+      7      16
+      8      17
+      9      17
+      a      17
+      b      17
+      c      17
+      d      17
+      e      17
+      f      17
+      10      17
+      11      17
+      12      17
+      13      18
+      14      18
+      15      18
+      1d      18
+      1e      18
+      22      18
+      26      18
+      27      18
+      28      18
+      29      18
+      2a      18
+      2b      18
+      2c      19
+   }
+
+   method 'genericCast ()V' {
+      0      22
+      1      22
+      2      22
+      3      22
+      4      22
+      5      22
+      6      22
+      7      23
+   }
+
+   method 'genericForEach ()V' {
+      0      26
+      1      26
+      2      26
+      3      26
+      4      26
+      5      26
+      6      26
+      7      26
+      d      26
+      20      26
+      21      27
+      22      27
+      23      27
+      24      27
+      25      27
+      26      27
+      27      27
+      2b      29
+   }
+
+   method 'genericForEachWithCast ()V' {
+      0      32
+      1      32
+      2      32
+      3      32
+      4      32
+      5      32
+      6      32
+      7      32
+      8      32
+      9      32
+      a      32
+      b      32
+      11      32
+      24      32
+      25      33
+      26      33
+      27      33
+      28      33
+      29      33
+      2a      33
+      2b      33
+      2f      35
+   }
+}
+
+class 'pkg/TestGenerics$Maps' {
+   method 'newHashMap ()Ljava/util/HashMap;' {
+      7      39
+   }
+}
+
+Lines mapping:
+28 <-> 13
+29 <-> 14
+32 <-> 17
+33 <-> 18
+34 <-> 19
+35 <-> 20
+38 <-> 23
+39 <-> 24
+42 <-> 27
+43 <-> 28
+45 <-> 30
+48 <-> 33
+49 <-> 34
+51 <-> 36
+55 <-> 40
+Not mapped:
+44
+50
diff --git a/testData/src/pkg/TestGenerics.java b/testData/src/pkg/TestGenerics.java
new file mode 100644
index 0000000..c571428
--- /dev/null
+++ b/testData/src/pkg/TestGenerics.java
@@ -0,0 +1,66 @@
+/*
+ * Copyright 2000-2017 JetBrains s.r.o.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package pkg;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class TestGenerics<A, B extends TestGenerics.Maps & List>  {
+  static Map<String, Boolean> field = Maps.newHashMap();
+  static List<List<String>> llstring = new ArrayList<>();
+  static List<Byte> bytes = new ArrayList<>();
+  
+  public static void genericInference() {
+    HashMap<String, Integer> test = Maps.newHashMap();
+  }
+
+  public void genericList() {
+    List<B> testList = new ArrayList<B>();
+    B b = testList.get(0);
+    System.out.println("B:" + b);
+  }
+
+  public void genericCast() {
+    HashMap<String, Boolean> upcast = (HashMap<String, Boolean>)field;
+  }
+
+  public void genericForEach() { 
+    for (String s : field.keySet()) {
+      System.out.println(s);
+    }
+  }
+
+  public void genericForEachWithCast() { 
+    for (String s : llstring.get(0)) {
+      System.out.println(s);
+    }
+  }
+
+  public <T extends Number> void genericSuperUp() {
+    List<T> list = new ArrayList<>();
+    for (Number number : bytes) {
+      list.add((T)number);
+    }
+   }
+
+  public static class Maps {
+    public static <K, V> HashMap<K, V> newHashMap() {
+      return new HashMap<K, V>();
+    }
+  }
+}
-- 
2.10.0.windows.1


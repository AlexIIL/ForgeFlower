From 5f9295e6611694c8ef80b719849f00d981227502 Mon Sep 17 00:00:00 2001
From: LexManos <LexManos@gmail.com>
Date: Thu, 11 May 2017 03:24:33 -0700
Subject: [PATCH] Fix primitive unboxing causing invocations of wrong
 overloaded functions.


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index b76d223..d0a4492 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -71,6 +71,7 @@ public class InvocationExprent extends Exprent {
   private List<Exprent> lstParameters = new ArrayList<>();
   private List<PooledConstant> bootstrapArguments;
   private List<VarType> genericArgs = new ArrayList<>();
+  private boolean forceBoxing = false;
 
   public InvocationExprent() {
     super(EXPRENT_INVOCATION);
@@ -269,7 +270,7 @@ public class InvocationExprent extends Exprent {
     tracer.addMapping(bytecode);
 
     if (isStatic) {
-      if (isBoxingCall()) {
+      if (isBoxingCall() && !forceBoxing) {
         // process general "boxing" calls, e.g. 'Object[] data = { true }' or 'Byte b = 123'
         // here 'byte' and 'short' values do not need an explicit narrowing type cast
         ExprProcessor.getCastedExprent(lstParameters.get(0), descriptor.params[0], buf, indent, false, false, false, tracer);
@@ -427,8 +428,50 @@ public class InvocationExprent extends Exprent {
       }
     }
 
-    boolean firstParameter = true;
     int start = isEnum ? 2 : 0;
+    VarType[] types = Arrays.copyOf(descriptor.params, descriptor.params.length);
+    for (int i = start; i < lstParameters.size(); i++) {
+      Exprent par = lstParameters.get(i);
+
+      // "unbox" invocation parameters, e.g. 'byteSet.add((byte)123)' or 'new ShortContainer((short)813)'
+      //However, we must make sure we don't accidentally make the call ambiguous.
+      //An example being List<Integer>, remove(Integer.valueOf(1)) and remove(1) are different functions
+      if (par.type == Exprent.EXPRENT_INVOCATION && ((InvocationExprent)par).isBoxingCall() && !setAmbiguousParameters.get(i)) {
+        InvocationExprent inv = (InvocationExprent)par;
+        Exprent value = inv.lstParameters.get(0);
+        types[i] = value.getExprType(); //Infer?
+
+        int count = 0;
+        nextMethod:
+        for (StructMethod mt : cl.getMethods()) {
+          if (name.equals(mt.getName())) {
+            MethodDescriptor md = MethodDescriptor.parseDescriptor(mt.getDescriptor());
+            if (md.params.length == descriptor.params.length) {
+              for (int x = 0; x < md.params.length; x++) {
+                if (md.params[x].typeFamily != descriptor.params[x].typeFamily &&
+                    md.params[x].typeFamily != types[x].typeFamily) {
+                  continue nextMethod;
+                }
+              }
+              count++;
+            }
+          }
+        }
+
+        if (count != matches.size()) { //We become more ambiguous? Lets keep the explicit boxing
+          types[i] = descriptor.params[i];
+          inv.forceBoxing = true;
+        }
+        else {
+          par = value;
+        }
+      }
+
+      lstParameters.set(i, par);
+    }
+
+
+    boolean firstParameter = true;
     for (int i = start; i < lstParameters.size(); i++) {
       if (sigFields == null || sigFields.get(i) == null) {
         TextBuffer buff = new TextBuffer();
@@ -463,12 +506,8 @@ public class InvocationExprent extends Exprent {
         */
 
         Exprent param = lstParameters.get(i);
-        // "unbox" invocation parameters, e.g. 'byteSet.add((byte)123)' or 'new ShortContainer((short)813)'
-        if (param.type == Exprent.EXPRENT_INVOCATION && ((InvocationExprent)param).isBoxingCall()) {
-          param = ((InvocationExprent)param).lstParameters.get(0);
-        }
         // 'byte' and 'short' literals need an explicit narrowing type cast when used as a parameter
-        ExprProcessor.getCastedExprent(param, descriptor.params[i], buff, indent, true, ambiguous, true, tracer);
+        ExprProcessor.getCastedExprent(param, types[i], buff, indent, true, ambiguous, true, tracer);
 
         // the last "new Object[0]" in the vararg call is not printed
         if (buff.length() > 0) {
diff --git a/testData/classes/pkg/TestPrimitives.class b/testData/classes/pkg/TestPrimitives.class
index be15ee5f11867ff023c89f26814bcbc4985d2194..67ffaea5965687f47c5e95c289248af7ecc1b28a 100644
GIT binary patch
literal 3478
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

literal 3197
zcmaKu`%@cL6vw}tENoa7NFY2cRj4gCP1B}UR9f0Xfl@&VXet$2A4^zZX_CcdLv5=T
z-><5z^;K)@V>;t6PG|IoG^3+`fd7SmgTFfJxpz043vJ4f%{k}Z^SS4od+y!*`R}iP
z0O-aKDk6AZ#Y1?3JziuFojqo&Xq^3>XIfhByS{vrNpsbGf8UCp`|Ic}rWx!pUxNiK
zhF~gKV)|(n8DyE1Q?U&ela^Jy1e-}KDjeihtm2G{mvJ_Pb0N0KD|j`8*Hm1<nu^!)
zMhI`JcnfbUc!yEmRq&pK>H}uZbPh=f#&%3ekO!?fLqfxtnKQ=o*;&IruFq!3(l}<N
z^~{uRn@snNva@KeNQjOtpI%5FH&&cU+svAdxoWKRN(e36X3jaB$w<(+IAB>BL(kDF
zu^G0QG)tcu2{rEMS%=n<V*`9>K!VE6sYT0nm_5bqw49VGu}5-zWQ32HG%`|xjaj(`
z<}}KOC<1A;1RTy-I(Hl9WAijNETNV!He}^_wsLHU56;oxP>DIXsN0M=$cNH2G)T+^
z!}0T?8d5q6Gx20dr#wQWds&cyg0Ch651mwsxQ;J9uG_YC#-J5z(^hW9vGZxiqV<%t
zm0i|tUYbFM584J5p)Td<>C?ybWp69gl$E#B#<0mYt7-jS>|WAWbq(7Q(~!g-4UeE(
z!((_{!+!K?ID|e80~pjWjH4Px@uY(HHGF^%CDeD#COW(3N*@Vf21{o2+(L3<cF9OP
z8pbi9;G%|)@UezTJjJ9>G(3%zf=f)ftl>DGQSd2Kt|<6S!{_)y!Iv7o!c_@@F6x9p
z*PMc{*^FyUnOE=)Q?4tx!M?v`#<YU(nDRXZR*r)eo2A!HZF*-Xt_wMJcEvHWR75LJ
zJ<vSHA*Pj_WUZQVY(vjd=SBo}sb`f{J(D*ks9jp9dtFCf1#kDst%-V99H6ks+E9jh
zT@a;S7Ups5`c<hrj0J;sza=&zPW9|GS=a^&+hpBdJ#X1r*4q1GBAt)+o)k>(zV(V=
zm%(zlOGT&&d5dP~=r-Sl&CY|c9q!p{qO&Kg$&BlZ;hn>1Y*?Jft?TnE9m-}plmgK;
z`yunaU`JF>JFIeTbWVlY{zxyj(486KH*o|KI~DZYL3)zDCHk(4--h%v2?50ES<Q_>
z>?B!pCm?}cq)FKAI~ToqOL4h?Ks<cDfM7f#Nd?GUsftHYT|g+_SW|#XN^Jpk@$gIm
z^}nE@F|7QK$aFAXKw}Y2scD&{Xc5h+=_-<1ifBzuSCiCM#C@qEHWkobjxY|D$5{mh
zwFsdRHE1JS2Wedta{_hPiw2ko3t24rS<sz8xv&yUP!<9DZe=lTmU&F=ETD}`s(e}#
zS`g*P7T3)~5&#d=lB}L|*W3+$zYlM&0B<FDTSfSz98P!Gz2U7D;Ozw8TmjyLeH>1A
z<GtZ`?u1*G4uW@9fFHm?4yQZUhbst{YVMV#qlgD8M81{a+bY2OahSvDF8ATWhIY6$
z-&#ax1^9M?$11>waD>C@9pS@;$UXS>BDPe3?<9Dl0{jV#a5%kte7F$#gMPPctpHCF
zd`|`V7>;o`y{9~Qg6nj`gFjK_#dF@x8SXg`_$P#3YM$pV&odZa+vwUOxCVV!dJB54
zyFFJqvWAVm2LxZ)_obKS9m~cyy7mjM<z=V*o9PJU$F8-eIJ-YCvwMjNSLkLcUm^9p
z1&8S3I6~LQuz+mxqdDOtduTR8s=r~|w0s*~C(0!E2#gSERG_FHC4gr!?dBx)QDCg`
zueAqmLXm%j96Z>5!<Xc;F&q-)8bMYCSrg<sLGBb}U65x4`9fKa;6Gp4%xWFvZ-M=&
zC;1rNsN-m+KI)_&Itl8E9{QOxL|Z&bzi>{`b}eFxevO~N8YOy>QoV{9UWQILRj&+`
pG~BMN#U+}tmr8Mx_z7&P>6iXNNa~kJP%Hn}_Or|N6!`@3-2apXB8mV2

diff --git a/testData/results/TestPrimitives.dec b/testData/results/TestPrimitives.dec
index 52f2cdf..3a9e491 100644
--- a/testData/results/TestPrimitives.dec
+++ b/testData/results/TestPrimitives.dec
@@ -1,480 +1,531 @@
 package pkg;
 
+import java.util.List;
+
 public class TestPrimitives {
+   private void testInvalidUnboxing() {
+      List<Integer> lst = null;// 7
+      lst.remove(Integer.valueOf(0));// 8
+   }// 9
+
    public void printAll() {
-      this.printBoolean(true);// 6
-      this.printByte((byte)123);// 7
-      this.printShort((short)257);// 8
-      this.printInt(123);// 9
-      this.printLong(123L);// 10
-      this.printFloat(1.23F);// 11
-      this.printDouble(1.23D);// 12
-      this.printChar('Z');// 13
-      System.out.println(String.format("%b, %d, %d, %d", this.getBoolean(), this.getByte(), this.getShort(), this.getInt()));// 15
-   }// 16
+      this.printBoolean(true);// 12
+      this.printByte((byte)123);// 13
+      this.printShort((short)257);// 14
+      this.printInt(123);// 15
+      this.printLong(123L);// 16
+      this.printFloat(1.23F);// 17
+      this.printDouble(1.23D);// 18
+      this.printChar('Z');// 19
+      System.out.println(String.format("%b, %d, %d, %d", this.getBoolean(), this.getByte(), this.getShort(), this.getInt()));// 21
+   }// 22
 
    public void printBoolean(boolean b) {
-      System.out.println(String.format("%b", b));// 19
-   }// 20
+      System.out.println(String.format("%b", b));// 25
+   }// 26
 
    public void printByte(byte b) {
-      System.out.println(String.format("%d", b));// 23
-   }// 24
+      System.out.println(String.format("%d", b));// 29
+   }// 30
 
    public void printShort(short s) {
-      System.out.println(String.format("%d", s));// 27
-   }// 28
+      System.out.println(String.format("%d", s));// 33
+   }// 34
 
    public void printInt(int i) {
-      System.out.println(String.format("%d", i));// 31
-   }// 32
+      System.out.println(String.format("%d", i));// 37
+   }// 38
 
    public void printLong(long l) {
-      System.out.println(String.format("%d", l));// 35
-   }// 36
+      System.out.println(String.format("%d", l));// 41
+   }// 42
 
    public void printFloat(float f) {
-      System.out.println(String.format("%f", f));// 39
-   }// 40
+      System.out.println(String.format("%f", f));// 45
+   }// 46
 
    public void printDouble(double d) {
-      System.out.println(String.format("%f", d));// 43
-   }// 44
+      System.out.println(String.format("%f", d));// 49
+   }// 50
 
    public void printChar(char c) {
-      System.out.println(String.format("%c", c));// 47
-   }// 48
+      System.out.println(String.format("%c", c));// 53
+   }// 54
 
    public boolean getBoolean() {
-      return false;// 52
+      return false;// 58
    }
 
    public byte getByte() {
-      return -128;// 56
+      return -128;// 62
    }
 
    public short getShort() {
-      return -32768;// 60
+      return -32768;// 66
    }
 
    public int getInt() {
-      return 42;// 64
+      return 42;// 70
    }
 
    public void printNarrowed() {
-      this.printByte((byte)this.getInt());// 68
-      this.printShort((short)this.getInt());// 69
-   }// 70
+      this.printByte((byte)this.getInt());// 74
+      this.printShort((short)this.getInt());// 75
+   }// 76
 
    public void constructor() {
-      new Byte((byte)1);// 73
-   }// 74
+      new Byte((byte)1);// 79
+   }// 80
 
    private boolean compare(char c) {
-      boolean res = c > -1;// 77
-      res = c > 0;// 78
-      res = c > 1;// 79
-      res = c > '\b';// 80
-      res = c > '\t';// 81
-      res = c > '\n';// 82
-      res = c > '\f';// 83
-      res = c > '\r';// 84
-      res = c > ' ';// 85
-      res = c > 'a';// 86
-      res = c > 'Z';// 87
-      res = c > 127;// 88
-      res = c > 255;// 89
-      return res;// 90
+      boolean res = c > -1;// 83
+      res = c > 0;// 84
+      res = c > 1;// 85
+      res = c > '\b';// 86
+      res = c > '\t';// 87
+      res = c > '\n';// 88
+      res = c > '\f';// 89
+      res = c > '\r';// 90
+      res = c > ' ';// 91
+      res = c > 'a';// 92
+      res = c > 'Z';// 93
+      res = c > 127;// 94
+      res = c > 255;// 95
+      return res;// 96
    }
 }
 
 class 'pkg/TestPrimitives' {
+   method 'testInvalidUnboxing ()V' {
+      0      6
+      1      6
+      2      7
+      3      7
+      4      7
+      5      7
+      6      7
+      7      7
+      8      7
+      9      7
+      a      7
+      b      7
+      d      8
+   }
+
    method 'printAll ()V' {
-      0      4
-      1      4
-      2      4
-      3      4
-      4      4
-      5      5
-      6      5
-      7      5
-      8      5
-      9      5
-      a      5
-      b      6
-      c      6
-      d      6
-      e      6
-      f      6
-      10      6
-      11      6
-      12      7
-      13      7
-      14      7
-      15      7
-      16      7
-      17      7
-      18      8
-      19      8
-      1a      8
-      1b      8
-      1c      8
-      1d      8
-      1e      8
-      1f      9
-      20      9
-      21      9
-      22      9
-      23      9
-      24      9
-      25      10
-      26      10
-      27      10
-      28      10
-      29      10
-      2a      10
-      2b      10
-      2c      11
-      2d      11
-      2e      11
-      2f      11
-      30      11
-      31      11
-      32      12
-      33      12
-      34      12
-      35      12
-      36      12
-      3d      12
-      3e      12
-      3f      12
-      40      12
-      41      12
-      42      12
-      43      12
-      47      12
-      48      12
-      49      12
-      4a      12
-      4b      12
-      4c      12
-      4d      12
-      51      12
-      52      12
-      53      12
-      54      12
-      55      12
-      56      12
-      57      12
-      5b      12
-      5c      12
-      5d      12
-      5e      12
-      5f      12
-      60      12
-      61      12
-      63      12
-      64      12
-      65      12
-      66      12
-      67      12
-      68      12
-      69      13
+      0      11
+      1      11
+      2      11
+      3      11
+      4      11
+      5      12
+      6      12
+      7      12
+      8      12
+      9      12
+      a      12
+      b      13
+      c      13
+      d      13
+      e      13
+      f      13
+      10      13
+      11      13
+      12      14
+      13      14
+      14      14
+      15      14
+      16      14
+      17      14
+      18      15
+      19      15
+      1a      15
+      1b      15
+      1c      15
+      1d      15
+      1e      15
+      1f      16
+      20      16
+      21      16
+      22      16
+      23      16
+      24      16
+      25      17
+      26      17
+      27      17
+      28      17
+      29      17
+      2a      17
+      2b      17
+      2c      18
+      2d      18
+      2e      18
+      2f      18
+      30      18
+      31      18
+      32      19
+      33      19
+      34      19
+      35      19
+      36      19
+      3d      19
+      3e      19
+      3f      19
+      40      19
+      41      19
+      42      19
+      43      19
+      47      19
+      48      19
+      49      19
+      4a      19
+      4b      19
+      4c      19
+      4d      19
+      51      19
+      52      19
+      53      19
+      54      19
+      55      19
+      56      19
+      57      19
+      5b      19
+      5c      19
+      5d      19
+      5e      19
+      5f      19
+      60      19
+      61      19
+      63      19
+      64      19
+      65      19
+      66      19
+      67      19
+      68      19
+      69      20
    }
 
    method 'printBoolean (Z)V' {
-      0      16
-      1      16
-      2      16
-      3      16
-      4      16
-      b      16
-      c      16
-      d      16
-      e      16
-      10      16
-      11      16
-      12      16
-      13      16
-      14      16
-      15      16
-      16      17
+      0      23
+      1      23
+      2      23
+      3      23
+      4      23
+      b      23
+      c      23
+      d      23
+      e      23
+      10      23
+      11      23
+      12      23
+      13      23
+      14      23
+      15      23
+      16      24
    }
 
    method 'printByte (B)V' {
-      0      20
-      1      20
-      2      20
-      3      20
-      4      20
-      b      20
-      c      20
-      d      20
-      e      20
-      10      20
-      11      20
-      12      20
-      13      20
-      14      20
-      15      20
-      16      21
+      0      27
+      1      27
+      2      27
+      3      27
+      4      27
+      b      27
+      c      27
+      d      27
+      e      27
+      10      27
+      11      27
+      12      27
+      13      27
+      14      27
+      15      27
+      16      28
    }
 
    method 'printShort (S)V' {
-      0      24
-      1      24
-      2      24
-      3      24
-      4      24
-      b      24
-      c      24
-      d      24
-      e      24
-      10      24
-      11      24
-      12      24
-      13      24
-      14      24
-      15      24
-      16      25
+      0      31
+      1      31
+      2      31
+      3      31
+      4      31
+      b      31
+      c      31
+      d      31
+      e      31
+      10      31
+      11      31
+      12      31
+      13      31
+      14      31
+      15      31
+      16      32
    }
 
    method 'printInt (I)V' {
-      0      28
-      1      28
-      2      28
-      3      28
-      4      28
-      b      28
-      c      28
-      d      28
-      e      28
-      10      28
-      11      28
-      12      28
-      13      28
-      14      28
-      15      28
-      16      29
+      0      35
+      1      35
+      2      35
+      3      35
+      4      35
+      b      35
+      c      35
+      d      35
+      e      35
+      10      35
+      11      35
+      12      35
+      13      35
+      14      35
+      15      35
+      16      36
    }
 
    method 'printLong (J)V' {
-      0      32
-      1      32
-      2      32
-      3      32
-      4      32
-      b      32
-      c      32
-      d      32
-      e      32
-      10      32
-      11      32
-      12      32
-      13      32
-      14      32
-      15      32
-      16      33
+      0      39
+      1      39
+      2      39
+      3      39
+      4      39
+      b      39
+      c      39
+      d      39
+      e      39
+      10      39
+      11      39
+      12      39
+      13      39
+      14      39
+      15      39
+      16      40
    }
 
    method 'printFloat (F)V' {
-      0      36
-      1      36
-      2      36
-      3      36
-      4      36
-      b      36
-      c      36
-      d      36
-      e      36
-      10      36
-      11      36
-      12      36
-      13      36
-      14      36
-      15      36
-      16      37
+      0      43
+      1      43
+      2      43
+      3      43
+      4      43
+      b      43
+      c      43
+      d      43
+      e      43
+      10      43
+      11      43
+      12      43
+      13      43
+      14      43
+      15      43
+      16      44
    }
 
    method 'printDouble (D)V' {
-      0      40
-      1      40
-      2      40
-      3      40
-      4      40
-      b      40
-      c      40
-      d      40
-      e      40
-      10      40
-      11      40
-      12      40
-      13      40
-      14      40
-      15      40
-      16      41
+      0      47
+      1      47
+      2      47
+      3      47
+      4      47
+      b      47
+      c      47
+      d      47
+      e      47
+      10      47
+      11      47
+      12      47
+      13      47
+      14      47
+      15      47
+      16      48
    }
 
    method 'printChar (C)V' {
-      0      44
-      1      44
-      2      44
-      3      44
-      4      44
-      b      44
-      c      44
-      d      44
-      e      44
-      10      44
-      11      44
-      12      44
-      13      44
-      14      44
-      15      44
-      16      45
+      0      51
+      1      51
+      2      51
+      3      51
+      4      51
+      b      51
+      c      51
+      d      51
+      e      51
+      10      51
+      11      51
+      12      51
+      13      51
+      14      51
+      15      51
+      16      52
    }
 
    method 'getBoolean ()Z' {
-      0      48
-      1      48
+      0      55
+      1      55
    }
 
    method 'getByte ()B' {
-      0      52
-      1      52
-      2      52
+      0      59
+      1      59
+      2      59
    }
 
    method 'getShort ()S' {
-      0      56
-      1      56
-      2      56
-      3      56
+      0      63
+      1      63
+      2      63
+      3      63
    }
 
    method 'getInt ()I' {
-      0      60
-      1      60
-      2      60
+      0      67
+      1      67
+      2      67
    }
 
    method 'printNarrowed ()V' {
-      0      64
-      1      64
-      2      64
-      3      64
-      4      64
-      5      64
-      6      64
-      7      64
-      8      64
-      9      65
-      a      65
-      b      65
-      c      65
-      d      65
-      e      65
-      f      65
-      10      65
-      11      65
-      12      66
+      0      71
+      1      71
+      2      71
+      3      71
+      4      71
+      5      71
+      6      71
+      7      71
+      8      71
+      9      72
+      a      72
+      b      72
+      c      72
+      d      72
+      e      72
+      f      72
+      10      72
+      11      72
+      12      73
    }
 
    method 'constructor ()V' {
-      4      69
-      9      70
+      4      76
+      9      77
    }
 
    method 'compare (C)Z' {
-      1      73
-      2      73
-      a      73
-      c      74
-      14      74
-      16      75
-      17      75
-      1f      75
-      21      76
-      23      76
-      2b      76
-      2d      77
-      2f      77
-      37      77
-      39      78
-      3b      78
-      43      78
-      45      79
-      47      79
-      4f      79
-      51      80
-      53      80
-      5b      80
-      5d      81
-      5f      81
-      67      81
-      69      82
-      6b      82
-      73      82
-      75      83
-      77      83
-      7f      83
-      81      84
-      83      84
-      8b      84
-      8d      85
-      90      85
-      98      85
-      9a      86
+      0      80
+      1      80
+      2      80
+      a      80
+      b      81
+      c      81
+      14      81
+      15      82
+      16      82
+      17      82
+      1f      82
+      20      83
+      21      83
+      22      83
+      23      83
+      2b      83
+      2c      84
+      2d      84
+      2e      84
+      2f      84
+      37      84
+      38      85
+      39      85
+      3a      85
+      3b      85
+      43      85
+      44      86
+      45      86
+      46      86
+      47      86
+      4f      86
+      50      87
+      51      87
+      52      87
+      53      87
+      5b      87
+      5c      88
+      5d      88
+      5e      88
+      5f      88
+      67      88
+      68      89
+      69      89
+      6a      89
+      6b      89
+      73      89
+      74      90
+      75      90
+      76      90
+      77      90
+      7f      90
+      80      91
+      81      91
+      82      91
+      83      91
+      8b      91
+      8c      92
+      8d      92
+      8e      92
+      8f      92
+      90      92
+      98      92
+      99      93
+      9a      93
    }
 }
 
 Lines mapping:
-6 <-> 5
-7 <-> 6
-8 <-> 7
-9 <-> 8
-10 <-> 9
-11 <-> 10
-12 <-> 11
-13 <-> 12
-15 <-> 13
-16 <-> 14
-19 <-> 17
-20 <-> 18
-23 <-> 21
-24 <-> 22
-27 <-> 25
-28 <-> 26
-31 <-> 29
-32 <-> 30
-35 <-> 33
-36 <-> 34
-39 <-> 37
-40 <-> 38
-43 <-> 41
-44 <-> 42
-47 <-> 45
-48 <-> 46
-52 <-> 49
-56 <-> 53
-60 <-> 57
-64 <-> 61
-68 <-> 65
-69 <-> 66
-70 <-> 67
-73 <-> 70
-74 <-> 71
-77 <-> 74
-78 <-> 75
-79 <-> 76
-80 <-> 77
-81 <-> 78
-82 <-> 79
-83 <-> 80
-84 <-> 81
-85 <-> 82
-86 <-> 83
-87 <-> 84
-88 <-> 85
-89 <-> 86
-90 <-> 87
+7 <-> 7
+8 <-> 8
+9 <-> 9
+12 <-> 12
+13 <-> 13
+14 <-> 14
+15 <-> 15
+16 <-> 16
+17 <-> 17
+18 <-> 18
+19 <-> 19
+21 <-> 20
+22 <-> 21
+25 <-> 24
+26 <-> 25
+29 <-> 28
+30 <-> 29
+33 <-> 32
+34 <-> 33
+37 <-> 36
+38 <-> 37
+41 <-> 40
+42 <-> 41
+45 <-> 44
+46 <-> 45
+49 <-> 48
+50 <-> 49
+53 <-> 52
+54 <-> 53
+58 <-> 56
+62 <-> 60
+66 <-> 64
+70 <-> 68
+74 <-> 72
+75 <-> 73
+76 <-> 74
+79 <-> 77
+80 <-> 78
+83 <-> 81
+84 <-> 82
+85 <-> 83
+86 <-> 84
+87 <-> 85
+88 <-> 86
+89 <-> 87
+90 <-> 88
+91 <-> 89
+92 <-> 90
+93 <-> 91
+94 <-> 92
+95 <-> 93
+96 <-> 94
diff --git a/testData/src/pkg/TestPrimitives.java b/testData/src/pkg/TestPrimitives.java
index 39041ef..9cf9a32 100644
--- a/testData/src/pkg/TestPrimitives.java
+++ b/testData/src/pkg/TestPrimitives.java
@@ -1,6 +1,12 @@
 package pkg;
 
+import java.util.List;
+
 public class TestPrimitives {
+  private void testInvalidUnboxing() {
+    List<Integer> lst = null;
+    lst.remove(Integer.valueOf(0));
+  }
 
   public void printAll() {
     printBoolean(true);
-- 
2.10.0.windows.1

